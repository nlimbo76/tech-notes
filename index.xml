<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>gBear's Tech Notes</title><link>https://nlimbo76.github.io/tech-notes/</link><description>Recent content on gBear's Tech Notes</description><generator>Hugo -- 0.148.2</generator><language>ko-kr</language><lastBuildDate>Sun, 24 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://nlimbo76.github.io/tech-notes/index.xml" rel="self" type="application/rss+xml"/><item><title>IoT 타깃 소형화 전략: 바이너리·메모리 최적화 체크리스트</title><link>https://nlimbo76.github.io/tech-notes/posts/iot-binary-size-optimization/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/iot-binary-size-optimization/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>플래시/램이 작은 IoT 보드에서 &lt;strong>1KB가 제품 기능 하나를 살리기도&lt;/strong> 합니다.&lt;br>
아래 체크리스트를 순서대로 적용하면, 빌드만 바꿔도 &lt;strong>수~수십 %&lt;/strong> 사이즈 절감이 가능해집니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-컴파일러링커-플래그">1) 컴파일러/링커 플래그&lt;/h2>
&lt;ul>
&lt;li>컴파일: &lt;code>-Os -ffunction-sections -fdata-sections&lt;/code>&lt;/li>
&lt;li>링커: &lt;code>-Wl,--gc-sections&lt;/code>&lt;/li>
&lt;li>LTO: &lt;code>-flto&lt;/code> (+ 링커가 LTO 대응인지 확인)&lt;/li>
&lt;li>C++: 예외/RTTI 비활성 → &lt;code>-fno-exceptions -fno-rtti&lt;/code>&lt;/li>
&lt;li>로그 레벨 매크로로 &lt;strong>릴리스에서 로그 제거&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if LOG_LEVEL &amp;lt; INFO
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define LOGI(...) ((void)0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-표준-라이브러리-선택">2) 표준 라이브러리 선택&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>newlib-nano&lt;/strong>: &lt;code>-specs=nano.specs&lt;/code> / &lt;code>-u _printf_float&lt;/code>(필요한 경우에만 float 지원)&lt;/li>
&lt;li>C++ iostream 대신 &lt;code>printf&lt;/code>류 사용(필요 최소한).&lt;/li>
&lt;li>동적할당 최소화: TLSF/정적 풀 등 &lt;strong>고정할당자&lt;/strong> 고려.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-코드-구조데이터">3) 코드 구조·데이터&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>const 데이터는 플래시에&lt;/strong>(플랫폼 매크로/속성 활용: &lt;code>__attribute__((section(&amp;quot;.rodata&amp;quot;)))&lt;/code> or &lt;code>PROGMEM&lt;/code>).&lt;/li>
&lt;li>Look-up table은 &lt;strong>압축/축소(정밀도 다운샘플)&lt;/strong> 후 해제.&lt;/li>
&lt;li>큰 구조체는 &lt;strong>비트필드&lt;/strong>/Packing, Align 비용 점검.&lt;/li>
&lt;li>템플릿/인라인 남용 자제(ROM 팽창 유발).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-링커-스크립트섹션">4) 링커 스크립트/섹션&lt;/h2>
&lt;ul>
&lt;li>미사용 섹션 제거(&lt;code>--gc-sections&lt;/code>)가 &lt;strong>실제 적용되는지&lt;/strong> &lt;code>nm/objdump&lt;/code>로 확인.&lt;/li>
&lt;li>Start-up/ISR 테이블 최소화, 약결 사용(weak)로 불필요 핸들러 제거.&lt;/li>
&lt;li>부트로더/앱 &lt;strong>A/B 파티션&lt;/strong> 설계 시 중복 코드를 공용화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-측정-루틴">5) 측정 루틴&lt;/h2>
&lt;ul>
&lt;li>바이너리 크기: &lt;code>size firmware.elf&lt;/code>&lt;/li>
&lt;li>섹션별: &lt;code>arm-none-eabi-size -A firmware.elf&lt;/code>&lt;/li>
&lt;li>기여도 분석: &lt;code>nm --size-sort firmware.elf | tail&lt;/code> / &lt;code>objdump -d&lt;/code>&lt;/li>
&lt;li>변경 전후 비교 스크립트로 &lt;strong>회귀 감시&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="6-실무-팁">6) 실무 팁&lt;/h2>
&lt;ul>
&lt;li>최적화는 &lt;strong>측정-적용-재측정&lt;/strong> 루프. “감”으로 하지 말 것.&lt;/li>
&lt;li>기능 플래그(예: &lt;code>FEATURE_X=ON/OFF&lt;/code>)로 &lt;strong>제품 변형&lt;/strong>을 빌드타임 분기.&lt;/li>
&lt;li>OTA/로그 등 &lt;strong>운영 기능&lt;/strong>은 크기·전력·성능 트레이드오프를 명시.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="체크리스트-복붙해서-쓰세요">체크리스트 (복붙해서 쓰세요)&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>-Os -ffunction-sections -fdata-sections -Wl,--gc-sections&lt;/code>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>-flto&lt;/code> + LTO 호환 링커&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> newlib-nano / printf float 최소화&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 릴리스 로그 제거 / 예외·RTTI 비활성&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> const 데이터 플래시 고정 / LUT 최적화&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 링커 스크립트 검토 / 미사용 ISR 제거&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>size/nm/objdump&lt;/code> 자동 리포팅&lt;/li>
&lt;/ul>
&lt;h2 id="연계-글-예정">연계 글 (예정)&lt;/h2>
&lt;ul>
&lt;li>“부트로더 A/B + 안전 롤백 설계”&lt;/li>
&lt;li>“에너지 예산 기반 최적화(전력·성능·메모리 균형)”&lt;/li>
&lt;/ul></description></item><item><title>OTA 업데이트 파이프라인과 이미지 서명 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/ota-signed-pipeline/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/ota-signed-pipeline/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>현장 장비의 펌웨어 업데이트(OTA)는 &lt;strong>가용성·보안·복구성&lt;/strong>이 핵심입니다. 이 문서는
&lt;strong>A/B 슬롯 전략 + 서명/무결성 검증 + 점진적 배포&lt;/strong>를 축으로 한 &lt;strong>엔드투엔드 파이프라인&lt;/strong>을 정리합니다.
목표는 &lt;em>“중단 없이, 위변조 없이, 실패해도 자동 복구”&lt;/em> 입니다.&lt;/p>
&lt;hr>
&lt;h2 id="핵심-개념--설계-포인트">핵심 개념 / 설계 포인트&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>서명과 무결성&lt;/strong>: 이미지 &lt;code>SHA-256 해시&lt;/code> + &lt;code>서명(Ed25519/ECDSA)&lt;/code> + &lt;code>메타데이터&lt;/code>를 &lt;strong>번들&lt;/strong>로 관리.&lt;/li>
&lt;li>&lt;strong>A/B 파티션&lt;/strong>: 비활성 슬롯에 다운로드→검증→스위치. 부팅 성공 신호 없으면 &lt;strong>자동 롤백&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>메타데이터(Manifest)&lt;/strong>: 버전, 타깃(보드/SoC), 빌드 타임, 해시, 최소 부트로더/SE 버전, &lt;strong>anti-rollback 카운터&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>전송 보안&lt;/strong>: 서버↔디바이스 &lt;strong>TLS/DTLS&lt;/strong> + 서버 측 &lt;strong>토큰/기기 인증&lt;/strong>. 전송 보안 ≠ 이미지 신뢰.&lt;/li>
&lt;li>&lt;strong>신뢰 루트&lt;/strong>: 부트로더에 &lt;strong>공개키 고정&lt;/strong>(ROM/섹션). 키 교체는 롤링 방식(Trust Anchor version).&lt;/li>
&lt;li>&lt;strong>대상 선정/점진 배포&lt;/strong>: 롤링 퍼센트(1%→10%→50%→100%), 지역/모델/펌웨어 라인업 기반 타겟팅.&lt;/li>
&lt;li>&lt;strong>중단 내성&lt;/strong>: 청크 다운로드 + 재시작 재개 + 이중 버퍼링 + 저널링/원자 스위치.&lt;/li>
&lt;li>&lt;strong>로깅/관측성&lt;/strong>: 기기별 업데이트 이력, 실패코드, 롤백 사유, 배포 cohort 성과.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="시스템-구성참고-아키텍처">시스템 구성(참고 아키텍처)&lt;/h2>
&lt;pre tabindex="0">&lt;code>Developer → CI(빌드/사인) → Artifact Store(CDN/S3)
│ ↑
└─ Backend(메타/대상선정/토큰) ─→ Device(Agent)
↓
Bootloader(Verify/Swap/Rollback)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>CI&lt;/strong>: 펌웨어 빌드, 해시 산출, &lt;strong>오프라인 서명&lt;/strong>(가능하면 HSM).&lt;/li>
&lt;li>&lt;strong>Artifact Store&lt;/strong>: 압축된 펌웨어 + manifest. Range 요청/Resume 지원.&lt;/li>
&lt;li>&lt;strong>Backend&lt;/strong>: 대상 선택, 배포 라운드, 토큰 발급, 통계 수집.&lt;/li>
&lt;li>&lt;strong>Device Agent&lt;/strong>: 다운로드/검증/스위치 요청/헬스체크 보고.&lt;/li>
&lt;li>&lt;strong>Bootloader&lt;/strong>: &lt;strong>유일한 신뢰 판단자&lt;/strong>. 공개키로 manifest+이미지 검증.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="manifest-포맷예시-json">Manifest 포맷(예시, JSON)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;board&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;nx3000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;soc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;stm32h7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.4.3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;build&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2025-08-20T13:55:21Z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;min_boot&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;anti_rollback&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;image&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;app_v1.4.3.bin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">524288&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sha256&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;3f5c...ab9d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sign&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ed25519&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;pub_key_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;k-2025-q3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sig&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;base64-encoded-signature&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>anti_rollback&lt;/code>: 부트로더 &lt;strong>카운터 &amp;gt;= 값&lt;/strong>이어야 설치 허용.&lt;/li>
&lt;li>&lt;code>pub_key_id&lt;/code>: 키 롤오버 시 버전을 구분(구 키 폐기 시점 통제).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="서명-파이프라인오프라인-예시">서명 파이프라인(오프라인 예시)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1) 해시 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sha256sum app.bin &amp;gt; app.bin.sha256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2) Ed25519 키 생성(오프라인/보안 저장)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl genpkey -algorithm Ed25519 -out ed25519_priv.pem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl pkey -in ed25519_priv.pem -pubout -out ed25519_pub.pem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3) 서명&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl pkeyutl -sign -inkey ed25519_priv.pem -in app.bin -out app.bin.sig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 4) 서명 검증(빌드 서버/테스트)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl pkeyutl -verify -pubin -inkey ed25519_pub.pem -sigfile app.bin.sig -in app.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>실제 배포에서는 &lt;strong>manifest 전체&lt;/strong>(메타+해시)를 서명하는 방식을 권장.
서명 전용 키는 HSM/YubiKey/전용 키 관리 서버에 보관.&lt;/p></description></item><item><title>델타 OTA와 스토리지 레이아웃 (분할/정렬/Wear-level) (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/delta-ota-storage-layout/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/delta-ota-storage-layout/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>네트워크/스토리지 제약이 큰 디바이스에서는 &lt;strong>델타 OTA&lt;/strong>(이전 버전 대비 차분만 전송)가 큰 이점을 줍니다. 하지만 플래시 정렬/지우기 단위, 전원 중단 내성, Wear-level, 베이스 버전 검증 등 &lt;strong>레이아웃 제약&lt;/strong>을 함께 설계해야 합니다.&lt;/p>
&lt;hr>
&lt;h2 id="핵심-포인트">핵심 포인트&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>델타 형식&lt;/strong>: bsdiff/xdelta/압축 결합(zstd). MCU에선 &lt;strong>스트리밍 적용&lt;/strong> 가능한 간단 포맷 선호.&lt;/li>
&lt;li>&lt;strong>베이스 버전 고정&lt;/strong>: &lt;code>from_version&lt;/code>과 &lt;strong>베이스 해시&lt;/strong>를 manifest에 명시, 불일치 시 전체 이미지로 폴백.&lt;/li>
&lt;li>&lt;strong>Out-of-place 적용&lt;/strong>: 같은 슬롯 내 &lt;strong>임시 영역&lt;/strong> 또는 B슬롯에 패치 적용 후 스왑(권장).&lt;/li>
&lt;li>&lt;strong>정렬/지우기 단위&lt;/strong>: NOR(4–64KB), NAND(128KB+) 지우기 단위에 맞춰 &lt;strong>청크 경계/쓰기 정렬&lt;/strong> 유지.&lt;/li>
&lt;li>&lt;strong>검증&lt;/strong>: 적용 후 전체 해시 재검증 + 블록 CRC. &lt;strong>전원 끊김&lt;/strong> 시 재개 지점 기록.&lt;/li>
&lt;li>&lt;strong>Wear-level&lt;/strong>: 자주 바뀌는 메타/로그는 순환 영역 사용, 델타 임시 파일은 균등 분산.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="레이아웃-예시">레이아웃 예시&lt;/h2>
&lt;pre tabindex="0">&lt;code>[Boot] [Env] [A: App] [B: App] [DeltaScratch] [Shared(Log/Meta)]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>DeltaScratch&lt;/code>: 패치 적용 중 임시 저장, 지우기 단위 정렬.&lt;/li>
&lt;li>&lt;code>Shared&lt;/code>: 오류 로그/통계, 롤백 후 원인 분석에 활용.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="델타-적용-흐름의사코드">델타 적용 흐름(의사코드)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">apply_delta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">patch_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">base_version_ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">from_ver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nf">base_hash_ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">from_hash&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">next_chunk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">verify_chunk_crc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nf">fail_resume&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">write_aligned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// erase-before-write + align
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">store_resume_marker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">verify_full_hash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">target_hash&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>재개 마커&lt;/strong>: 전원 실패 후 &lt;code>pos&lt;/code>부터 재시작. 마커는 저널 방식/2섹터 토글.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="manifest추가-필드-예시">Manifest(추가 필드 예시)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;from_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.4.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;from_hash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;base-image-sha256&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;target_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.4.3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;target_hash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;new-image-sha256&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;delta_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">183742&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;block&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">65536&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apply&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;erase_align&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">65536&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;write_align&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">256&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>erase_align&lt;/code>/&lt;code>write_align&lt;/code>은 디바이스별로 다르므로 서버가 &lt;strong>타깃별 manifest&lt;/strong>를 생성.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="성능신뢰성-팁">성능/신뢰성 팁&lt;/h2>
&lt;ul>
&lt;li>작은 패치는 &lt;strong>압축 이득 &amp;lt; 오버헤드&lt;/strong>일 수 있음 → 임계값 이상에서만 델타 사용.&lt;/li>
&lt;li>대용량 NAND는 &lt;strong>ECC/OOB&lt;/strong> 고려, 블록 불량 테이블(BBT) 유지.&lt;/li>
&lt;li>&lt;strong>측정 자동화&lt;/strong>: 네트워크 트래픽, 플래시 쓰기량, 적용시간, 실패율을 CI에 리포팅.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="체크리스트">체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>from_version/hash&lt;/code> 불일치 시 전체 이미지 폴백.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Out-of-place 적용 + 스왑(안전).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 정렬/지우기 단위에 맞춘 청크/쓰기.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 재개 마커/블록 CRC + 전체 해시 재검증.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Wear-level 정책(순환/분산) 적용.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 성능 임계값 기준으로 델타/풀이미지 선택.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="흔한-문제">흔한 문제&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>현상&lt;/th>
&lt;th>원인&lt;/th>
&lt;th>대응&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>적용 중 손상&lt;/td>
&lt;td>정렬 미스, 전원 중단&lt;/td>
&lt;td>정렬 강제, 재개 마커 + 저널링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>부팅 후 크래시&lt;/td>
&lt;td>베이스 mismatch&lt;/td>
&lt;td>베이스 검증 실패 시 폴백 강제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>플래시 수명 악화&lt;/td>
&lt;td>임시 영역 남용&lt;/td>
&lt;td>임시 영역 wear-level/크기 조정&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>부트로더 A/B + 안전 롤백 설계 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/bootloader-ab-rollback/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/bootloader-ab-rollback/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>현장 기기(게이트웨이, DVR, IoT 센서)에서 &lt;strong>펌웨어 업데이트 실패&lt;/strong>는 곧 장애입니다. 안전성을 높이기 위해 흔히 쓰는 방식이 &lt;strong>A/B 파티션 + 헬스체크 + 자동 롤백&lt;/strong>입니다. 이 글은 설계 핵심과 체크리스트, 최소 구현 스케치를 &lt;strong>정리노트&lt;/strong> 형태로 제공합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-ab-파티션-핵심">1) A/B 파티션 핵심&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>영역 분리&lt;/strong>: 부트로더, A슬롯(활성), B슬롯(대기), 공유 설정/데이터.&lt;/li>
&lt;li>&lt;strong>원자성&lt;/strong>: 업데이트는 항상 비활성 슬롯(B)에 쓰고, &lt;strong>스위치&lt;/strong>는 부트플래그/부트카운터로 제어.&lt;/li>
&lt;li>&lt;strong>독립성&lt;/strong>: A/B가 서로 다른 버전/파일시스템/레이아웃을 가져도 안전하도록 &lt;strong>부트 인덱스&lt;/strong>만 참조.&lt;/li>
&lt;/ul>
&lt;h3 id="파티션-예">파티션 예&lt;/h3>
&lt;pre tabindex="0">&lt;code>[Boot] [Env] [A: App + FS] [B: App + FS] [Shared NVRAM/Config] [Logs]
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="2-부트-플로우-의사코드">2) 부트 플로우 (의사코드)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// NVRAM flags
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// boot_slot: 0(A) / 1(B)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// trial: 부팅 검증 중(1) / 정상(0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// attempts: 남은 재시도 횟수
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">boot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">slot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">get_nv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;boot_slot&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">trial&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">get_nv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;trial&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">trial&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">health_check_ok&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">decrement_attempts&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">reboot_same_slot&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">switch_slot_and_reboot&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 롤백
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">set_nv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;trial&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 검증 완료
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">clear_attempts&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 정상 부팅
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>핵심&lt;/strong>: 부팅 직후에만 통과시키는 &lt;strong>헬스체크 신호&lt;/strong>(앱이 부트로더에 “정상 가동” 알림). 앱이 정상 기동 전에 크래시/워치독 리셋되면 롤백 로직이 발동.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-헬스체크-설계">3) 헬스체크 설계&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>신호 경로&lt;/strong>: 부트로더가 읽을 수 있는 단 하나의 플래그(NVRAM/EEPROM/FRAM/특정 플래시 섹터).&lt;/li>
&lt;li>&lt;strong>타임박스&lt;/strong>: 예) 전원 인가 후 30초 내 앱이 &lt;code>/dev/flag_ok&lt;/code>에 1 기록 → 부트로더가 다음 부팅에 &lt;code>trial=0&lt;/code>.&lt;/li>
&lt;li>&lt;strong>보수적 판단&lt;/strong>: 플래그가 없으면 실패로 간주(전원 중단, 파일시스템 깨짐 대비).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-ota스위치">4) OTA/스위치&lt;/h2>
&lt;ol>
&lt;li>OTA 클라이언트가 B슬롯에 이미지 다운로드 + 검증(해시/서명).&lt;/li>
&lt;li>&lt;code>boot_slot=B&lt;/code>, &lt;code>trial=1&lt;/code>, &lt;code>attempts=3&lt;/code> 설정 후 &lt;strong>reboot&lt;/strong>.&lt;/li>
&lt;li>앱이 정상 기동 → 헬스체크 통과 → &lt;code>trial=0&lt;/code> 확정.&lt;/li>
&lt;li>실패/재부팅 반복 → attempts 소진 시 자동 롤백.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>보안&lt;/strong>: 이미지 서명(Ed25519/ECDSA) + 메타데이터(버전/타깃/시간) 무결성 검증을 OTA 단계에서 수행.&lt;/p></description></item><item><title>부트로더 Safe Mode + 리커버리 설계 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/safe-mode-recovery/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/safe-mode-recovery/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>OTA 실패·스토리지 손상·설정 파손 같은 &lt;strong>비정상 부팅 상황&lt;/strong>에서 기기를 벽돌로 만들지 않으려면, **Safe Mode(최소 기능 부팅)**와 &lt;strong>리커버리 경로&lt;/strong>가 필요합니다. 이 문서는 트리거, 부팅 분기, 복구 채널, 보안/신뢰성 전제와 현장 운영 팁을 &lt;strong>적용 중심&lt;/strong>으로 정리합니다.&lt;/p>
&lt;hr>
&lt;h2 id="핵심-개념--설계-포인트">핵심 개념 / 설계 포인트&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Safe Mode 목표&lt;/strong>: 네트워크 또는 물리 인터페이스를 통한 &lt;strong>재플래시/롤백/설정 초기화&lt;/strong>만 제공.&lt;/li>
&lt;li>&lt;strong>트리거&lt;/strong>: 부팅 연속 실패 횟수, 특정 키 입력/핀 단락, 원격 명령, 펌웨어 플래그(&lt;code>force_safe=1&lt;/code>).&lt;/li>
&lt;li>&lt;strong>부트 분기&lt;/strong>: Normal → Trial(새 이미지 검증) → 실패 시 Safe Mode → 복구/롤백 후 Normal 복귀.&lt;/li>
&lt;li>&lt;strong>복구 채널&lt;/strong>: USB DFU/Mass Storage, UART/XMODEM, SD카드, 이더넷(TFTP/HTTPS), 내부 &lt;strong>Rescue 파티션&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>보안&lt;/strong>: 복구 이미지도 &lt;strong>서명 검증&lt;/strong> 필수. &lt;strong>개발자 모드&lt;/strong>와 현장 모드를 엄격 분리.&lt;/li>
&lt;li>&lt;strong>전원/스토리지 안정성&lt;/strong>: 원자적 플래그 갱신, 저널링/더블버퍼, 배터리/전압 체크 후 플래시 작업.&lt;/li>
&lt;li>&lt;strong>가시성&lt;/strong>: 상태 LED/부저 패턴, 디버그 콘솔 도움말, 오류코드 표준화.&lt;/li>
&lt;li>&lt;strong>현장 운용&lt;/strong>: RMA/AS 절차와 스크립트화, 장치 라벨링(시리얼/버전/키 ID).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="부트-플로우의사코드">부트 플로우(의사코드)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">boot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">force_safe&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nf">pin_safe_pressed&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nf">safe_mode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">trial_mode&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">app_health_ok_within&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TIMEBOX&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">commit_trial_success&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">boot_app&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">decrement_attempts&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;trial fail -&amp;gt; safe&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">safe_mode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">reboot&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">app_valid&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nf">boot_fail_counter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">MAX_RETRY&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">safe_mode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">boot_app&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="safe-mode-구성-요소">Safe Mode 구성 요소&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Rescue 이미지&lt;/strong>: 읽기 전용(압축 가능), 크기 최소화, 네트워크 스택/스토리지 드라이버/검증 코드 포함.&lt;/li>
&lt;li>&lt;strong>업데이트 명령&lt;/strong>: &lt;code>flash &amp;lt;image.bin&amp;gt; &amp;lt;slot&amp;gt;&lt;/code> / &lt;code>rollback&lt;/code> / &lt;code>factory-reset&lt;/code> / &lt;code>verify &amp;lt;manifest.json&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;strong>네트워크&lt;/strong>: DHCP 실패 대비 고정 IP/Link-Local, HTTPS/TLS 기본, 인증 토큰/핀코드.&lt;/li>
&lt;li>&lt;strong>물리 인터페이스&lt;/strong>: DFU 버튼/점퍼, UART 콘솔(속도·명령 최소화), SD 부트(파일명 규약).&lt;/li>
&lt;li>&lt;strong>로그&lt;/strong>: 모든 단계에서 결과/오류코드 기록 → 공유 파티션 업로드 가능.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="보안-설계">보안 설계&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>서명 없는 리커버리 금지&lt;/strong>: 오프라인 서명/공개키 고정, 만료/철회 목록(CRL 비슷한 메커니즘) 고려.&lt;/li>
&lt;li>&lt;strong>디버그 포트 잠금&lt;/strong>: 생산 모드에선 JTAG/SWD 잠금(또는 보안 디버그 인증).&lt;/li>
&lt;li>&lt;strong>개발자 모드 게이트&lt;/strong>: 하드웨어 키/One-Time Token으로 제한, 디버그 빌드 노출 방지.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="전원스토리지-안전성">전원/스토리지 안전성&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>원자 플래그&lt;/strong>: 2섹터 토글(상호 배타적 유효 플래그), CRC 포함.&lt;/li>
&lt;li>&lt;strong>더블버퍼 쓰기&lt;/strong>: 새 이미지/메타를 임시 영역에 완성 후 커밋.&lt;/li>
&lt;li>&lt;strong>Wear-level&lt;/strong>: 로그/카운터는 순환 버퍼로 쓰기, NAND는 OOB/ECC 고려.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="운영-체크리스트">운영 체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Safe Mode 진입 트리거 3종 이상(자동/물리/원격).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Rescue 이미지의 &lt;strong>서명 검증 경로&lt;/strong> 테스트.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 플래그/카운터의 전원 중단 내성 시험(전원 드롭 테스트).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> LED/콘솔에 &lt;strong>오류코드 매핑표&lt;/strong> 제공.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> RMA 스크립트와 리커버리 매뉴얼(사진 포함) 배포.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 프로비저닝/개발자 모드 잠금 정책 문서화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="트러블슈팅-요약">트러블슈팅 요약&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>증상&lt;/th>
&lt;th>원인 후보&lt;/th>
&lt;th>조치&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Safe Mode 반복 진입&lt;/td>
&lt;td>health 신호 타임박스 과도, 스토리지 오류&lt;/td>
&lt;td>타임박스 조정, 스토리지 진단/Bad block 회피&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리커버리 이미지 거부&lt;/td>
&lt;td>서명/키 ID 불일치&lt;/td>
&lt;td>키 롤오버 정책/manifest 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DFU 중 전원 끊김&lt;/td>
&lt;td>원자 커밋 미비&lt;/td>
&lt;td>더블버퍼/저널링 적용, 진행률 기반 재개&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+CMake+QEMU)</title><link>https://nlimbo76.github.io/tech-notes/posts/embedded-unit-integration-cmake/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/embedded-unit-integration-cmake/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>가볍고 이식성 높은 &lt;strong>Unity + CMock&lt;/strong> 조합과 &lt;strong>CMake/CTest&lt;/strong>로 “호스트에서 빠른 유닛 테스트 → 선택적 QEMU 통합 스모크”를 만드는 실습 가이드입니다. &lt;strong>크로스 환경 의존을 최소화&lt;/strong>하고, &lt;strong>HIL 전&lt;/strong>에 최대한 논리 버그를 제거하는 게 목표입니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-폴더-구조예시">1) 폴더 구조(예시)&lt;/h2>
&lt;pre tabindex="0">&lt;code>project/
├─ src/ # 제품 코드
├─ include/ # 헤더
├─ tests/
│ ├─ unit/ # 유닛 테스트
│ └─ integration/ # 통합 테스트 (QEMU 스모크 포함)
├─ third_party/
│ ├─ unity/
│ └─ cmock/
└─ CMakeLists.txt
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="2-의존성-간단-설치">2) 의존성 (간단 설치)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Unity &amp;amp; CMock 가져오기 (서브모듈 권장)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add https://github.com/ThrowTheSwitch/Unity third_party/unity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add https://github.com/ThrowTheSwitch/CMock third_party/cmock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="3-유닛-테스트-샘플">3) 유닛 테스트 샘플&lt;/h2>
&lt;p>&lt;code>src/ringbuf.c&lt;/code>를 예로:&lt;/p></description></item><item><title>임베디드 코드 품질 개선을 위한 테스트 전략 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 &lt;strong>초기 설계 품질 + 자동화된 검증 체계&lt;/strong>로 결정됩니다.&lt;br>
이 글은 “&lt;strong>테스트 피라미드&lt;/strong>(유닛:통합:HIL ≈ &lt;strong>70:20:10&lt;/strong>), &lt;strong>테스트 친화 설계&lt;/strong>, &lt;strong>CI 파이프라인&lt;/strong>”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-핵심-전략-요약">1) 핵심 전략 요약&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>테스트 피라미드&lt;/strong>: 유닛(최다) → 통합(선별) → HIL(임계경로 위주).&lt;/li>
&lt;li>&lt;strong>테스트 친화 설계(Design for Testability)&lt;/strong>:
&lt;ul>
&lt;li>HAL(하드웨어 추상화)로 &lt;strong>의존성 분리&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>링커 대체/약결(symbol weak)&lt;/strong>, &lt;strong>함수 포인터 주입&lt;/strong>, &lt;strong>인터페이스(ports/adapters)&lt;/strong>.&lt;/li>
&lt;li>빌드 분리: &lt;code>Debug/Release/Test&lt;/code>(테스트 전용 설정·스텁 허용).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>CI 파이프라인&lt;/strong>:
&lt;ul>
&lt;li>Host(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크.&lt;/li>
&lt;li>실패 시 &lt;strong>아티팩트/로그&lt;/strong> 자동 첨부로 디버깅 시간 절감.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-레벨별-테스트-설계">2) 레벨별 테스트 설계&lt;/h2>
&lt;h3 id="21-유닛-테스트">2.1 유닛 테스트&lt;/h3>
&lt;ul>
&lt;li>“입출력 결정성”이 높은 순서로 작성. &lt;strong>순수 함수&lt;/strong>부터.&lt;/li>
&lt;li>C 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움.&lt;/li>
&lt;li>&lt;strong>링커 치환&lt;/strong>: &lt;code>-Wl,--wrap=foo&lt;/code>로 하드웨어 의존 함수를 테스트 더블로 대체.&lt;/li>
&lt;/ul>
&lt;h3 id="22-통합-테스트">2.2 통합 테스트&lt;/h3>
&lt;ul>
&lt;li>드라이버+프로토콜 등 &lt;strong>두 모듈 이상 결합&lt;/strong> 검증.&lt;/li>
&lt;li>타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시.&lt;/li>
&lt;li>시리얼·SPI 등은 &lt;strong>Loopback/Fake HAL&lt;/strong>로 먼저 검증한 뒤 실제 보드로 축소 실행.&lt;/li>
&lt;/ul>
&lt;h3 id="23-hil하드웨어-인더루프">2.3 HIL(하드웨어 인더루프)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>임계경로&lt;/strong>만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환.&lt;/li>
&lt;li>자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 &lt;strong>스모크&lt;/strong>는 가능.&lt;/li>
&lt;li>**롤백 가능한 펌업(OTA)**와 &lt;strong>Watchdog&lt;/strong> 스크립트화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-cmake--ctest--coverage-예시">3) CMake + CTest + Coverage 예시&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># CMakeLists.txt (테스트 전용)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">enable_testing&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">tests/foo_test.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">src/foo.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">-O0&lt;/span> &lt;span class="s">-g&lt;/span> &lt;span class="s">--coverage&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">m&lt;/span> &lt;span class="s">gcov&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">NAME&lt;/span> &lt;span class="s">foo_test&lt;/span> &lt;span class="s">COMMAND&lt;/span> &lt;span class="s">my_unit_tests&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 &amp;amp; 커버리지&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctest --output-on-failure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lcov --directory . --capture --output-file coverage.info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">genhtml coverage.info --output-directory coverage_html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="4-github-actions-매트릭스요지">4) GitHub Actions 매트릭스(요지)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">test-build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">target&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">host, arm-none-eabi]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.target == &amp;#39;host&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake --build build -j
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ctest --test-dir build --output-on-failure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cross build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.target == &amp;#39;arm-none-eabi&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake --build build-arm -j&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="5-실무-체크리스트">5) 실무 체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 테스트 대상 코드는 &lt;strong>하드웨어 접근을 직접 하지 않도록&lt;/strong> HAL 경유.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 타이밍 의존 로직은 &lt;strong>클럭/타이머 인터페이스&lt;/strong>로 추상화.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;strong>UBSan/ASan&lt;/strong>은 Host에서 최대한 사용(베어메탈은 제한).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 실패 로그/아티팩트를 CI에서 자동 보존.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="연계-글-예정">연계 글 (예정)&lt;/h2>
&lt;ul>
&lt;li>“임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)”&lt;/li>
&lt;li>“HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증”&lt;/li>
&lt;/ul></description></item><item><title>키 롤오버와 신뢰 앵커 마이그레이션 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/key-rollover-trust-anchor/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/key-rollover-trust-anchor/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>이미지 서명 체계는 시간이 지날수록 **키 교체(롤오버)**와 &lt;strong>신뢰 앵커(Trust Anchor) 갱신&lt;/strong>이 필요합니다. 교체가 어설프면 정상 이미지도 거부되거나, 반대로 위조 이미지가 통과할 수 있습니다. 안전한 이동경로를 정리합니다.&lt;/p>
&lt;hr>
&lt;h2 id="핵심-원칙">핵심 원칙&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>이중 수용 윈도우&lt;/strong>: N과 N+1 키를 일정 기간 &lt;strong>동시 수용&lt;/strong> → 이후 N &lt;strong>폐기&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>키 식별자&lt;/strong>: manifest에 &lt;code>pub_key_id&lt;/code>(또는 cert chain) 포함, 부트로더는 &lt;strong>키 테이블&lt;/strong>에서 조회.&lt;/li>
&lt;li>&lt;strong>신뢰 앵커 버저닝&lt;/strong>: TA(version) 필드로 &lt;strong>부트로더 내장 키 세트&lt;/strong>를 버전관리.&lt;/li>
&lt;li>&lt;strong>Anti-rollback&lt;/strong>: 펌웨어/부트로더 모두 &lt;strong>카운터&lt;/strong> 또는 &lt;strong>버전 퓨즈&lt;/strong>를 이용해 다운그레이드 방지.&lt;/li>
&lt;li>&lt;strong>오프라인 서명/HSM&lt;/strong>: 키 생성·서명 환경 분리, 접근권한 최소화, 감사 추적.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="마이그레이션-단계">마이그레이션 단계&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>준비&lt;/strong>: 부트로더 업데이트로 &lt;strong>키 테이블에 N+1 추가&lt;/strong>, TA 버전 증가(&lt;code>ta_ver = 2&lt;/code>).&lt;/li>
&lt;li>&lt;strong>이행&lt;/strong>: 배포 파이프라인에서 &lt;strong>N+1 키로 서명&lt;/strong> 시작, 부트로더는 N/N+1 둘 다 허용.&lt;/li>
&lt;li>&lt;strong>폐기&lt;/strong>: 충분한 안정화 후 &lt;code>accept={{N+1}}&lt;/code>만 허용. &lt;strong>CRL/KeyRevocationList&lt;/strong>(간단 테이블) 반영.&lt;/li>
&lt;li>&lt;strong>청소&lt;/strong>: 오래된 이미지/메타에서 N 의존성 제거, 로그/감사 보고서 보관.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="부트로더-구조예시">부트로더 구조(예시)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pk&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">kid&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">ta_ver&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kt">keyent_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// flags: ACCEPT=1, REVOKED=2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">keyent_t&lt;/span> &lt;span class="n">KEYTAB&lt;/span>&lt;span class="p">[];&lt;/span> &lt;span class="c1">// ROM/RODATA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="nf">verify_sig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">manifest_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">img&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">keyent_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">find_key_by_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pub_key_id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">flags&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">REVOKED&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ta_ver&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">min_ta_ver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">ed25519_verify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sig&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">signed_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nf">signed_len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">pk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>테이블 업데이트&lt;/strong>: 부트로더 업데이트나 별도 &lt;strong>TA 세그먼트&lt;/strong> 업데이트로 반영.&lt;/li>
&lt;li>&lt;strong>폐기 표식&lt;/strong>: &lt;code>REVOKED&lt;/code> 플래그/버전으로 거부.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="배포-파이프라인">배포 파이프라인&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>키 ID 주입&lt;/strong>: 빌드 시 &lt;code>pub_key_id&lt;/code>, &lt;code>min_ta_ver&lt;/code>를 manifest에 삽입.&lt;/li>
&lt;li>&lt;strong>이중 서명(선택)&lt;/strong>: 과도기에 N/N+1 모두 서명해 호환성 확보(부트로더 복수 검증 지원 시).&lt;/li>
&lt;li>&lt;strong>감사/가시성&lt;/strong>: 어떤 키로 서명·검증되었는지 메트릭화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="사고-대응키-유출취소">사고 대응(키 유출/취소)&lt;/h2>
&lt;ul>
&lt;li>즉시 &lt;strong>KeyRevocationList&lt;/strong> 업데이트 + TA 버전 인상(구 키 거부).&lt;/li>
&lt;li>N+1 키로 &lt;strong>강제 업데이트&lt;/strong> 배포(안전 모드 진입 명령 포함).&lt;/li>
&lt;li>RMA/현장용 오프라인 리커버리 키는 &lt;strong>완전히 별도 관리&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="체크리스트">체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>pub_key_id&lt;/code>/&lt;code>ta_ver&lt;/code>가 manifest/부트로더에 일관되게 반영.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 이중 수용 윈도우와 최종 폐기 일정이 문서화.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Anti-rollback 카운터/퓨즈 정책 적용.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> HSM/오프라인 서명과 접근권한 최소화.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 키 유출 대응 절차/연락망/자동화 스크립트 준비.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="흔한-함정">흔한 함정&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상황&lt;/th>
&lt;th>문제&lt;/th>
&lt;th>대안&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>키 교체 직후 대량 실패&lt;/td>
&lt;td>구형 부트로더가 N+1을 모름&lt;/td>
&lt;td>부트로더 업데이트를 &lt;strong>선행&lt;/strong>하고 폭넓은 이중 수용 기간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>키 폐기 누락&lt;/td>
&lt;td>구 키 계속 허용&lt;/td>
&lt;td>Revocation 리스트와 TA 버전 상향 강제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장기 필드 장치&lt;/td>
&lt;td>업데이트 드물어 구 키만 인식&lt;/td>
&lt;td>현장 방문 없이 &lt;strong>Safe Mode OTA&lt;/strong>로 TA 업데이트&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>임베디드 시스템 개발 방법론 정리 (확장판)</title><link>https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 &lt;strong>실시간성&lt;/strong>을 고려해야 합니다.
이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다.
본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-전통적-개발-방법론">1) 전통적 개발 방법론&lt;/h2>
&lt;h3 id="워터폴-모델--핵심-요약">워터폴 모델 — 핵심 요약&lt;/h3>
&lt;ul>
&lt;li>요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행&lt;/li>
&lt;li>&lt;strong>장점:&lt;/strong> 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리&lt;/li>
&lt;li>&lt;strong>단점:&lt;/strong> 요구사항 변경에 취약, 환경 변동성 반영 어려움&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>부연 설명&lt;/strong>
하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다.
다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.&lt;/p></description></item></channel></rss>