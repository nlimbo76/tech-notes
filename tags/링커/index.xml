<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>링커 on gBear's Tech Notes</title><link>https://nlimbo76.github.io/tech-notes/tags/%EB%A7%81%EC%BB%A4/</link><description>Recent content in 링커 on gBear's Tech Notes</description><generator>Hugo -- 0.148.2</generator><language>ko-kr</language><lastBuildDate>Sun, 24 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://nlimbo76.github.io/tech-notes/tags/%EB%A7%81%EC%BB%A4/index.xml" rel="self" type="application/rss+xml"/><item><title>IoT 타깃 소형화 전략: 바이너리·메모리 최적화 체크리스트</title><link>https://nlimbo76.github.io/tech-notes/posts/iot-binary-size-optimization/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/iot-binary-size-optimization/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>플래시/램이 작은 IoT 보드에서 &lt;strong>1KB가 제품 기능 하나를 살리기도&lt;/strong> 합니다.&lt;br>
아래 체크리스트를 순서대로 적용하면, 빌드만 바꿔도 &lt;strong>수~수십 %&lt;/strong> 사이즈 절감이 가능해집니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-컴파일러링커-플래그">1) 컴파일러/링커 플래그&lt;/h2>
&lt;ul>
&lt;li>컴파일: &lt;code>-Os -ffunction-sections -fdata-sections&lt;/code>&lt;/li>
&lt;li>링커: &lt;code>-Wl,--gc-sections&lt;/code>&lt;/li>
&lt;li>LTO: &lt;code>-flto&lt;/code> (+ 링커가 LTO 대응인지 확인)&lt;/li>
&lt;li>C++: 예외/RTTI 비활성 → &lt;code>-fno-exceptions -fno-rtti&lt;/code>&lt;/li>
&lt;li>로그 레벨 매크로로 &lt;strong>릴리스에서 로그 제거&lt;/strong>:
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if LOG_LEVEL &amp;lt; INFO
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define LOGI(...) ((void)0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-표준-라이브러리-선택">2) 표준 라이브러리 선택&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>newlib-nano&lt;/strong>: &lt;code>-specs=nano.specs&lt;/code> / &lt;code>-u _printf_float&lt;/code>(필요한 경우에만 float 지원)&lt;/li>
&lt;li>C++ iostream 대신 &lt;code>printf&lt;/code>류 사용(필요 최소한).&lt;/li>
&lt;li>동적할당 최소화: TLSF/정적 풀 등 &lt;strong>고정할당자&lt;/strong> 고려.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-코드-구조데이터">3) 코드 구조·데이터&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>const 데이터는 플래시에&lt;/strong>(플랫폼 매크로/속성 활용: &lt;code>__attribute__((section(&amp;quot;.rodata&amp;quot;)))&lt;/code> or &lt;code>PROGMEM&lt;/code>).&lt;/li>
&lt;li>Look-up table은 &lt;strong>압축/축소(정밀도 다운샘플)&lt;/strong> 후 해제.&lt;/li>
&lt;li>큰 구조체는 &lt;strong>비트필드&lt;/strong>/Packing, Align 비용 점검.&lt;/li>
&lt;li>템플릿/인라인 남용 자제(ROM 팽창 유발).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-링커-스크립트섹션">4) 링커 스크립트/섹션&lt;/h2>
&lt;ul>
&lt;li>미사용 섹션 제거(&lt;code>--gc-sections&lt;/code>)가 &lt;strong>실제 적용되는지&lt;/strong> &lt;code>nm/objdump&lt;/code>로 확인.&lt;/li>
&lt;li>Start-up/ISR 테이블 최소화, 약결 사용(weak)로 불필요 핸들러 제거.&lt;/li>
&lt;li>부트로더/앱 &lt;strong>A/B 파티션&lt;/strong> 설계 시 중복 코드를 공용화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-측정-루틴">5) 측정 루틴&lt;/h2>
&lt;ul>
&lt;li>바이너리 크기: &lt;code>size firmware.elf&lt;/code>&lt;/li>
&lt;li>섹션별: &lt;code>arm-none-eabi-size -A firmware.elf&lt;/code>&lt;/li>
&lt;li>기여도 분석: &lt;code>nm --size-sort firmware.elf | tail&lt;/code> / &lt;code>objdump -d&lt;/code>&lt;/li>
&lt;li>변경 전후 비교 스크립트로 &lt;strong>회귀 감시&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="6-실무-팁">6) 실무 팁&lt;/h2>
&lt;ul>
&lt;li>최적화는 &lt;strong>측정-적용-재측정&lt;/strong> 루프. “감”으로 하지 말 것.&lt;/li>
&lt;li>기능 플래그(예: &lt;code>FEATURE_X=ON/OFF&lt;/code>)로 &lt;strong>제품 변형&lt;/strong>을 빌드타임 분기.&lt;/li>
&lt;li>OTA/로그 등 &lt;strong>운영 기능&lt;/strong>은 크기·전력·성능 트레이드오프를 명시.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="체크리스트-복붙해서-쓰세요">체크리스트 (복붙해서 쓰세요)&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>-Os -ffunction-sections -fdata-sections -Wl,--gc-sections&lt;/code>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>-flto&lt;/code> + LTO 호환 링커&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> newlib-nano / printf float 최소화&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 릴리스 로그 제거 / 예외·RTTI 비활성&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> const 데이터 플래시 고정 / LUT 최적화&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 링커 스크립트 검토 / 미사용 ISR 제거&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>size/nm/objdump&lt;/code> 자동 리포팅&lt;/li>
&lt;/ul>
&lt;h2 id="연계-글-예정">연계 글 (예정)&lt;/h2>
&lt;ul>
&lt;li>“부트로더 A/B + 안전 롤백 설계”&lt;/li>
&lt;li>“에너지 예산 기반 최적화(전력·성능·메모리 균형)”&lt;/li>
&lt;/ul></description></item><item><title>델타 OTA와 스토리지 레이아웃 (분할/정렬/Wear-level) (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/delta-ota-storage-layout/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/delta-ota-storage-layout/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>네트워크/스토리지 제약이 큰 디바이스에서는 &lt;strong>델타 OTA&lt;/strong>(이전 버전 대비 차분만 전송)가 큰 이점을 줍니다. 하지만 플래시 정렬/지우기 단위, 전원 중단 내성, Wear-level, 베이스 버전 검증 등 &lt;strong>레이아웃 제약&lt;/strong>을 함께 설계해야 합니다.&lt;/p>
&lt;hr>
&lt;h2 id="핵심-포인트">핵심 포인트&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>델타 형식&lt;/strong>: bsdiff/xdelta/압축 결합(zstd). MCU에선 &lt;strong>스트리밍 적용&lt;/strong> 가능한 간단 포맷 선호.&lt;/li>
&lt;li>&lt;strong>베이스 버전 고정&lt;/strong>: &lt;code>from_version&lt;/code>과 &lt;strong>베이스 해시&lt;/strong>를 manifest에 명시, 불일치 시 전체 이미지로 폴백.&lt;/li>
&lt;li>&lt;strong>Out-of-place 적용&lt;/strong>: 같은 슬롯 내 &lt;strong>임시 영역&lt;/strong> 또는 B슬롯에 패치 적용 후 스왑(권장).&lt;/li>
&lt;li>&lt;strong>정렬/지우기 단위&lt;/strong>: NOR(4–64KB), NAND(128KB+) 지우기 단위에 맞춰 &lt;strong>청크 경계/쓰기 정렬&lt;/strong> 유지.&lt;/li>
&lt;li>&lt;strong>검증&lt;/strong>: 적용 후 전체 해시 재검증 + 블록 CRC. &lt;strong>전원 끊김&lt;/strong> 시 재개 지점 기록.&lt;/li>
&lt;li>&lt;strong>Wear-level&lt;/strong>: 자주 바뀌는 메타/로그는 순환 영역 사용, 델타 임시 파일은 균등 분산.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="레이아웃-예시">레이아웃 예시&lt;/h2>
&lt;pre tabindex="0">&lt;code>[Boot] [Env] [A: App] [B: App] [DeltaScratch] [Shared(Log/Meta)]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>DeltaScratch&lt;/code>: 패치 적용 중 임시 저장, 지우기 단위 정렬.&lt;/li>
&lt;li>&lt;code>Shared&lt;/code>: 오류 로그/통계, 롤백 후 원인 분석에 활용.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="델타-적용-흐름의사코드">델타 적용 흐름(의사코드)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">apply_delta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">patch_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">base_version_ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">from_ver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nf">base_hash_ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">from_hash&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">next_chunk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">verify_chunk_crc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nf">fail_resume&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">write_aligned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// erase-before-write + align
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">store_resume_marker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">verify_full_hash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">target_hash&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>재개 마커&lt;/strong>: 전원 실패 후 &lt;code>pos&lt;/code>부터 재시작. 마커는 저널 방식/2섹터 토글.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="manifest추가-필드-예시">Manifest(추가 필드 예시)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;from_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.4.2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;from_hash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;base-image-sha256&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;target_version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.4.3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;target_hash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;new-image-sha256&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;delta_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">183742&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;block&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">65536&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;apply&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;erase_align&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">65536&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;write_align&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">256&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>erase_align&lt;/code>/&lt;code>write_align&lt;/code>은 디바이스별로 다르므로 서버가 &lt;strong>타깃별 manifest&lt;/strong>를 생성.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="성능신뢰성-팁">성능/신뢰성 팁&lt;/h2>
&lt;ul>
&lt;li>작은 패치는 &lt;strong>압축 이득 &amp;lt; 오버헤드&lt;/strong>일 수 있음 → 임계값 이상에서만 델타 사용.&lt;/li>
&lt;li>대용량 NAND는 &lt;strong>ECC/OOB&lt;/strong> 고려, 블록 불량 테이블(BBT) 유지.&lt;/li>
&lt;li>&lt;strong>측정 자동화&lt;/strong>: 네트워크 트래픽, 플래시 쓰기량, 적용시간, 실패율을 CI에 리포팅.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="체크리스트">체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>from_version/hash&lt;/code> 불일치 시 전체 이미지 폴백.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Out-of-place 적용 + 스왑(안전).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 정렬/지우기 단위에 맞춘 청크/쓰기.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 재개 마커/블록 CRC + 전체 해시 재검증.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Wear-level 정책(순환/분산) 적용.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 성능 임계값 기준으로 델타/풀이미지 선택.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="흔한-문제">흔한 문제&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>현상&lt;/th>
&lt;th>원인&lt;/th>
&lt;th>대응&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>적용 중 손상&lt;/td>
&lt;td>정렬 미스, 전원 중단&lt;/td>
&lt;td>정렬 강제, 재개 마커 + 저널링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>부팅 후 크래시&lt;/td>
&lt;td>베이스 mismatch&lt;/td>
&lt;td>베이스 검증 실패 시 폴백 강제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>플래시 수명 악화&lt;/td>
&lt;td>임시 영역 남용&lt;/td>
&lt;td>임시 영역 wear-level/크기 조정&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>