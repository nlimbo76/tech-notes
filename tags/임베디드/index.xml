<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>임베디드 on gBear's Tech Notes</title><link>https://nlimbo76.github.io/tech-notes/tags/%EC%9E%84%EB%B2%A0%EB%94%94%EB%93%9C/</link><description>Recent content in 임베디드 on gBear's Tech Notes</description><generator>Hugo -- 0.148.2</generator><language>ko-kr</language><lastBuildDate>Sun, 24 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://nlimbo76.github.io/tech-notes/tags/%EC%9E%84%EB%B2%A0%EB%94%94%EB%93%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>OTA 업데이트 파이프라인과 이미지 서명 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/ota-signed-pipeline/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/ota-signed-pipeline/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>현장 장비의 펌웨어 업데이트(OTA)는 &lt;strong>가용성·보안·복구성&lt;/strong>이 핵심입니다. 이 문서는
&lt;strong>A/B 슬롯 전략 + 서명/무결성 검증 + 점진적 배포&lt;/strong>를 축으로 한 &lt;strong>엔드투엔드 파이프라인&lt;/strong>을 정리합니다.
목표는 &lt;em>“중단 없이, 위변조 없이, 실패해도 자동 복구”&lt;/em> 입니다.&lt;/p>
&lt;hr>
&lt;h2 id="핵심-개념--설계-포인트">핵심 개념 / 설계 포인트&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>서명과 무결성&lt;/strong>: 이미지 &lt;code>SHA-256 해시&lt;/code> + &lt;code>서명(Ed25519/ECDSA)&lt;/code> + &lt;code>메타데이터&lt;/code>를 &lt;strong>번들&lt;/strong>로 관리.&lt;/li>
&lt;li>&lt;strong>A/B 파티션&lt;/strong>: 비활성 슬롯에 다운로드→검증→스위치. 부팅 성공 신호 없으면 &lt;strong>자동 롤백&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>메타데이터(Manifest)&lt;/strong>: 버전, 타깃(보드/SoC), 빌드 타임, 해시, 최소 부트로더/SE 버전, &lt;strong>anti-rollback 카운터&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>전송 보안&lt;/strong>: 서버↔디바이스 &lt;strong>TLS/DTLS&lt;/strong> + 서버 측 &lt;strong>토큰/기기 인증&lt;/strong>. 전송 보안 ≠ 이미지 신뢰.&lt;/li>
&lt;li>&lt;strong>신뢰 루트&lt;/strong>: 부트로더에 &lt;strong>공개키 고정&lt;/strong>(ROM/섹션). 키 교체는 롤링 방식(Trust Anchor version).&lt;/li>
&lt;li>&lt;strong>대상 선정/점진 배포&lt;/strong>: 롤링 퍼센트(1%→10%→50%→100%), 지역/모델/펌웨어 라인업 기반 타겟팅.&lt;/li>
&lt;li>&lt;strong>중단 내성&lt;/strong>: 청크 다운로드 + 재시작 재개 + 이중 버퍼링 + 저널링/원자 스위치.&lt;/li>
&lt;li>&lt;strong>로깅/관측성&lt;/strong>: 기기별 업데이트 이력, 실패코드, 롤백 사유, 배포 cohort 성과.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="시스템-구성참고-아키텍처">시스템 구성(참고 아키텍처)&lt;/h2>
&lt;pre tabindex="0">&lt;code>Developer → CI(빌드/사인) → Artifact Store(CDN/S3)
│ ↑
└─ Backend(메타/대상선정/토큰) ─→ Device(Agent)
↓
Bootloader(Verify/Swap/Rollback)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>CI&lt;/strong>: 펌웨어 빌드, 해시 산출, &lt;strong>오프라인 서명&lt;/strong>(가능하면 HSM).&lt;/li>
&lt;li>&lt;strong>Artifact Store&lt;/strong>: 압축된 펌웨어 + manifest. Range 요청/Resume 지원.&lt;/li>
&lt;li>&lt;strong>Backend&lt;/strong>: 대상 선택, 배포 라운드, 토큰 발급, 통계 수집.&lt;/li>
&lt;li>&lt;strong>Device Agent&lt;/strong>: 다운로드/검증/스위치 요청/헬스체크 보고.&lt;/li>
&lt;li>&lt;strong>Bootloader&lt;/strong>: &lt;strong>유일한 신뢰 판단자&lt;/strong>. 공개키로 manifest+이미지 검증.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="manifest-포맷예시-json">Manifest 포맷(예시, JSON)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;board&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;nx3000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;soc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;stm32h7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1.4.3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;build&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2025-08-20T13:55:21Z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;min_boot&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;anti_rollback&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;image&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;app_v1.4.3.bin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">524288&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sha256&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;3f5c...ab9d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sign&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Ed25519&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;pub_key_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;k-2025-q3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sig&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;base64-encoded-signature&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>anti_rollback&lt;/code>: 부트로더 &lt;strong>카운터 &amp;gt;= 값&lt;/strong>이어야 설치 허용.&lt;/li>
&lt;li>&lt;code>pub_key_id&lt;/code>: 키 롤오버 시 버전을 구분(구 키 폐기 시점 통제).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="서명-파이프라인오프라인-예시">서명 파이프라인(오프라인 예시)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1) 해시 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sha256sum app.bin &amp;gt; app.bin.sha256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2) Ed25519 키 생성(오프라인/보안 저장)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl genpkey -algorithm Ed25519 -out ed25519_priv.pem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl pkey -in ed25519_priv.pem -pubout -out ed25519_pub.pem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3) 서명&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl pkeyutl -sign -inkey ed25519_priv.pem -in app.bin -out app.bin.sig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 4) 서명 검증(빌드 서버/테스트)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl pkeyutl -verify -pubin -inkey ed25519_pub.pem -sigfile app.bin.sig -in app.bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>실제 배포에서는 &lt;strong>manifest 전체&lt;/strong>(메타+해시)를 서명하는 방식을 권장.
서명 전용 키는 HSM/YubiKey/전용 키 관리 서버에 보관.&lt;/p></description></item><item><title>임베디드 코드 품질 개선을 위한 테스트 전략 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 &lt;strong>초기 설계 품질 + 자동화된 검증 체계&lt;/strong>로 결정됩니다.&lt;br>
이 글은 “&lt;strong>테스트 피라미드&lt;/strong>(유닛:통합:HIL ≈ &lt;strong>70:20:10&lt;/strong>), &lt;strong>테스트 친화 설계&lt;/strong>, &lt;strong>CI 파이프라인&lt;/strong>”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-핵심-전략-요약">1) 핵심 전략 요약&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>테스트 피라미드&lt;/strong>: 유닛(최다) → 통합(선별) → HIL(임계경로 위주).&lt;/li>
&lt;li>&lt;strong>테스트 친화 설계(Design for Testability)&lt;/strong>:
&lt;ul>
&lt;li>HAL(하드웨어 추상화)로 &lt;strong>의존성 분리&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>링커 대체/약결(symbol weak)&lt;/strong>, &lt;strong>함수 포인터 주입&lt;/strong>, &lt;strong>인터페이스(ports/adapters)&lt;/strong>.&lt;/li>
&lt;li>빌드 분리: &lt;code>Debug/Release/Test&lt;/code>(테스트 전용 설정·스텁 허용).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>CI 파이프라인&lt;/strong>:
&lt;ul>
&lt;li>Host(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크.&lt;/li>
&lt;li>실패 시 &lt;strong>아티팩트/로그&lt;/strong> 자동 첨부로 디버깅 시간 절감.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-레벨별-테스트-설계">2) 레벨별 테스트 설계&lt;/h2>
&lt;h3 id="21-유닛-테스트">2.1 유닛 테스트&lt;/h3>
&lt;ul>
&lt;li>“입출력 결정성”이 높은 순서로 작성. &lt;strong>순수 함수&lt;/strong>부터.&lt;/li>
&lt;li>C 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움.&lt;/li>
&lt;li>&lt;strong>링커 치환&lt;/strong>: &lt;code>-Wl,--wrap=foo&lt;/code>로 하드웨어 의존 함수를 테스트 더블로 대체.&lt;/li>
&lt;/ul>
&lt;h3 id="22-통합-테스트">2.2 통합 테스트&lt;/h3>
&lt;ul>
&lt;li>드라이버+프로토콜 등 &lt;strong>두 모듈 이상 결합&lt;/strong> 검증.&lt;/li>
&lt;li>타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시.&lt;/li>
&lt;li>시리얼·SPI 등은 &lt;strong>Loopback/Fake HAL&lt;/strong>로 먼저 검증한 뒤 실제 보드로 축소 실행.&lt;/li>
&lt;/ul>
&lt;h3 id="23-hil하드웨어-인더루프">2.3 HIL(하드웨어 인더루프)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>임계경로&lt;/strong>만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환.&lt;/li>
&lt;li>자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 &lt;strong>스모크&lt;/strong>는 가능.&lt;/li>
&lt;li>**롤백 가능한 펌업(OTA)**와 &lt;strong>Watchdog&lt;/strong> 스크립트화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-cmake--ctest--coverage-예시">3) CMake + CTest + Coverage 예시&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># CMakeLists.txt (테스트 전용)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">enable_testing&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">tests/foo_test.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">src/foo.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">-O0&lt;/span> &lt;span class="s">-g&lt;/span> &lt;span class="s">--coverage&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">m&lt;/span> &lt;span class="s">gcov&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">NAME&lt;/span> &lt;span class="s">foo_test&lt;/span> &lt;span class="s">COMMAND&lt;/span> &lt;span class="s">my_unit_tests&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 &amp;amp; 커버리지&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctest --output-on-failure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lcov --directory . --capture --output-file coverage.info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">genhtml coverage.info --output-directory coverage_html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="4-github-actions-매트릭스요지">4) GitHub Actions 매트릭스(요지)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">test-build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">target&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">host, arm-none-eabi]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.target == &amp;#39;host&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake --build build -j
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ctest --test-dir build --output-on-failure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cross build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.target == &amp;#39;arm-none-eabi&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake --build build-arm -j&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="5-실무-체크리스트">5) 실무 체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 테스트 대상 코드는 &lt;strong>하드웨어 접근을 직접 하지 않도록&lt;/strong> HAL 경유.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 타이밍 의존 로직은 &lt;strong>클럭/타이머 인터페이스&lt;/strong>로 추상화.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;strong>UBSan/ASan&lt;/strong>은 Host에서 최대한 사용(베어메탈은 제한).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 실패 로그/아티팩트를 CI에서 자동 보존.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="연계-글-예정">연계 글 (예정)&lt;/h2>
&lt;ul>
&lt;li>“임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)”&lt;/li>
&lt;li>“HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증”&lt;/li>
&lt;/ul></description></item><item><title>임베디드 시스템 개발 방법론 정리 (확장판)</title><link>https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 &lt;strong>실시간성&lt;/strong>을 고려해야 합니다.
이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다.
본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-전통적-개발-방법론">1) 전통적 개발 방법론&lt;/h2>
&lt;h3 id="워터폴-모델--핵심-요약">워터폴 모델 — 핵심 요약&lt;/h3>
&lt;ul>
&lt;li>요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행&lt;/li>
&lt;li>&lt;strong>장점:&lt;/strong> 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리&lt;/li>
&lt;li>&lt;strong>단점:&lt;/strong> 요구사항 변경에 취약, 환경 변동성 반영 어려움&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>부연 설명&lt;/strong>
하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다.
다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.&lt;/p></description></item></channel></rss>