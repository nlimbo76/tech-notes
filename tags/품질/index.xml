<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>품질 on gBear's Tech Notes</title><link>https://nlimbo76.github.io/tech-notes/tags/%ED%92%88%EC%A7%88/</link><description>Recent content in 품질 on gBear's Tech Notes</description><generator>Hugo -- 0.148.2</generator><language>ko-kr</language><lastBuildDate>Sun, 24 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://nlimbo76.github.io/tech-notes/tags/%ED%92%88%EC%A7%88/index.xml" rel="self" type="application/rss+xml"/><item><title>임베디드 코드 품질 개선을 위한 테스트 전략 (정리판)</title><link>https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/</link><pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate><guid>https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 &lt;strong>초기 설계 품질 + 자동화된 검증 체계&lt;/strong>로 결정됩니다.&lt;br>
이 글은 “&lt;strong>테스트 피라미드&lt;/strong>(유닛:통합:HIL ≈ &lt;strong>70:20:10&lt;/strong>), &lt;strong>테스트 친화 설계&lt;/strong>, &lt;strong>CI 파이프라인&lt;/strong>”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-핵심-전략-요약">1) 핵심 전략 요약&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>테스트 피라미드&lt;/strong>: 유닛(최다) → 통합(선별) → HIL(임계경로 위주).&lt;/li>
&lt;li>&lt;strong>테스트 친화 설계(Design for Testability)&lt;/strong>:
&lt;ul>
&lt;li>HAL(하드웨어 추상화)로 &lt;strong>의존성 분리&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>링커 대체/약결(symbol weak)&lt;/strong>, &lt;strong>함수 포인터 주입&lt;/strong>, &lt;strong>인터페이스(ports/adapters)&lt;/strong>.&lt;/li>
&lt;li>빌드 분리: &lt;code>Debug/Release/Test&lt;/code>(테스트 전용 설정·스텁 허용).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>CI 파이프라인&lt;/strong>:
&lt;ul>
&lt;li>Host(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크.&lt;/li>
&lt;li>실패 시 &lt;strong>아티팩트/로그&lt;/strong> 자동 첨부로 디버깅 시간 절감.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-레벨별-테스트-설계">2) 레벨별 테스트 설계&lt;/h2>
&lt;h3 id="21-유닛-테스트">2.1 유닛 테스트&lt;/h3>
&lt;ul>
&lt;li>“입출력 결정성”이 높은 순서로 작성. &lt;strong>순수 함수&lt;/strong>부터.&lt;/li>
&lt;li>C 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움.&lt;/li>
&lt;li>&lt;strong>링커 치환&lt;/strong>: &lt;code>-Wl,--wrap=foo&lt;/code>로 하드웨어 의존 함수를 테스트 더블로 대체.&lt;/li>
&lt;/ul>
&lt;h3 id="22-통합-테스트">2.2 통합 테스트&lt;/h3>
&lt;ul>
&lt;li>드라이버+프로토콜 등 &lt;strong>두 모듈 이상 결합&lt;/strong> 검증.&lt;/li>
&lt;li>타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시.&lt;/li>
&lt;li>시리얼·SPI 등은 &lt;strong>Loopback/Fake HAL&lt;/strong>로 먼저 검증한 뒤 실제 보드로 축소 실행.&lt;/li>
&lt;/ul>
&lt;h3 id="23-hil하드웨어-인더루프">2.3 HIL(하드웨어 인더루프)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>임계경로&lt;/strong>만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환.&lt;/li>
&lt;li>자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 &lt;strong>스모크&lt;/strong>는 가능.&lt;/li>
&lt;li>**롤백 가능한 펌업(OTA)**와 &lt;strong>Watchdog&lt;/strong> 스크립트화.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-cmake--ctest--coverage-예시">3) CMake + CTest + Coverage 예시&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># CMakeLists.txt (테스트 전용)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">enable_testing&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">tests/foo_test.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">src/foo.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">-O0&lt;/span> &lt;span class="s">-g&lt;/span> &lt;span class="s">--coverage&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">my_unit_tests&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">m&lt;/span> &lt;span class="s">gcov&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">NAME&lt;/span> &lt;span class="s">foo_test&lt;/span> &lt;span class="s">COMMAND&lt;/span> &lt;span class="s">my_unit_tests&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 &amp;amp; 커버리지&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctest --output-on-failure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lcov --directory . --capture --output-file coverage.info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">genhtml coverage.info --output-directory coverage_html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="4-github-actions-매트릭스요지">4) GitHub Actions 매트릭스(요지)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">test-build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">target&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">host, arm-none-eabi]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Host test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.target == &amp;#39;host&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake --build build -j
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ctest --test-dir build --output-on-failure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cross build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.target == &amp;#39;arm-none-eabi&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cmake --build build-arm -j&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="5-실무-체크리스트">5) 실무 체크리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 테스트 대상 코드는 &lt;strong>하드웨어 접근을 직접 하지 않도록&lt;/strong> HAL 경유.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 타이밍 의존 로직은 &lt;strong>클럭/타이머 인터페이스&lt;/strong>로 추상화.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;strong>UBSan/ASan&lt;/strong>은 Host에서 최대한 사용(베어메탈은 제한).&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 실패 로그/아티팩트를 CI에서 자동 보존.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="연계-글-예정">연계 글 (예정)&lt;/h2>
&lt;ul>
&lt;li>“임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)”&lt;/li>
&lt;li>“HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증”&lt;/li>
&lt;/ul></description></item></channel></rss>