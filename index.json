[{"content":"개요 플래시/램이 작은 IoT 보드에서 1KB가 제품 기능 하나를 살리기도 합니다.\n아래 체크리스트를 순서대로 적용하면, 빌드만 바꿔도 수~수십 % 사이즈 절감이 가능해집니다.\n1) 컴파일러/링커 플래그 컴파일: -Os -ffunction-sections -fdata-sections 링커: -Wl,--gc-sections LTO: -flto (+ 링커가 LTO 대응인지 확인) C++: 예외/RTTI 비활성 → -fno-exceptions -fno-rtti 로그 레벨 매크로로 릴리스에서 로그 제거: #if LOG_LEVEL \u0026lt; INFO #define LOGI(...) ((void)0) #endif 2) 표준 라이브러리 선택 newlib-nano: -specs=nano.specs / -u _printf_float(필요한 경우에만 float 지원) C++ iostream 대신 printf류 사용(필요 최소한). 동적할당 최소화: TLSF/정적 풀 등 고정할당자 고려. 3) 코드 구조·데이터 const 데이터는 플래시에(플랫폼 매크로/속성 활용: __attribute__((section(\u0026quot;.rodata\u0026quot;))) or PROGMEM). Look-up table은 압축/축소(정밀도 다운샘플) 후 해제. 큰 구조체는 비트필드/Packing, Align 비용 점검. 템플릿/인라인 남용 자제(ROM 팽창 유발). 4) 링커 스크립트/섹션 미사용 섹션 제거(--gc-sections)가 실제 적용되는지 nm/objdump로 확인. Start-up/ISR 테이블 최소화, 약결 사용(weak)로 불필요 핸들러 제거. 부트로더/앱 A/B 파티션 설계 시 중복 코드를 공용화. 5) 측정 루틴 바이너리 크기: size firmware.elf 섹션별: arm-none-eabi-size -A firmware.elf 기여도 분석: nm --size-sort firmware.elf | tail / objdump -d 변경 전후 비교 스크립트로 회귀 감시. 6) 실무 팁 최적화는 측정-적용-재측정 루프. “감”으로 하지 말 것. 기능 플래그(예: FEATURE_X=ON/OFF)로 제품 변형을 빌드타임 분기. OTA/로그 등 운영 기능은 크기·전력·성능 트레이드오프를 명시. 체크리스트 (복붙해서 쓰세요) -Os -ffunction-sections -fdata-sections -Wl,--gc-sections -flto + LTO 호환 링커 newlib-nano / printf float 최소화 릴리스 로그 제거 / 예외·RTTI 비활성 const 데이터 플래시 고정 / LUT 최적화 링커 스크립트 검토 / 미사용 ISR 제거 size/nm/objdump 자동 리포팅 연계 글 (예정) “부트로더 A/B + 안전 롤백 설계” “에너지 예산 기반 최적화(전력·성능·메모리 균형)” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/iot-binary-size-optimization/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e플래시/램이 작은 IoT 보드에서 \u003cstrong\u003e1KB가 제품 기능 하나를 살리기도\u003c/strong\u003e 합니다.\u003cbr\u003e\n아래 체크리스트를 순서대로 적용하면, 빌드만 바꿔도 \u003cstrong\u003e수~수십 %\u003c/strong\u003e 사이즈 절감이 가능해집니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-컴파일러링커-플래그\"\u003e1) 컴파일러/링커 플래그\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e컴파일: \u003ccode\u003e-Os -ffunction-sections -fdata-sections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e링커: \u003ccode\u003e-Wl,--gc-sections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLTO: \u003ccode\u003e-flto\u003c/code\u003e (+ 링커가 LTO 대응인지 확인)\u003c/li\u003e\n\u003cli\u003eC++: 예외/RTTI 비활성 → \u003ccode\u003e-fno-exceptions -fno-rtti\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e로그 레벨 매크로로 \u003cstrong\u003e릴리스에서 로그 제거\u003c/strong\u003e:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#if LOG_LEVEL \u0026lt; INFO\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#define LOGI(...) ((void)0)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-표준-라이브러리-선택\"\u003e2) 표준 라이브러리 선택\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003enewlib-nano\u003c/strong\u003e: \u003ccode\u003e-specs=nano.specs\u003c/code\u003e / \u003ccode\u003e-u _printf_float\u003c/code\u003e(필요한 경우에만 float 지원)\u003c/li\u003e\n\u003cli\u003eC++ iostream 대신 \u003ccode\u003eprintf\u003c/code\u003e류 사용(필요 최소한).\u003c/li\u003e\n\u003cli\u003e동적할당 최소화: TLSF/정적 풀 등 \u003cstrong\u003e고정할당자\u003c/strong\u003e 고려.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-코드-구조데이터\"\u003e3) 코드 구조·데이터\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003econst 데이터는 플래시에\u003c/strong\u003e(플랫폼 매크로/속성 활용: \u003ccode\u003e__attribute__((section(\u0026quot;.rodata\u0026quot;)))\u003c/code\u003e or \u003ccode\u003ePROGMEM\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eLook-up table은 \u003cstrong\u003e압축/축소(정밀도 다운샘플)\u003c/strong\u003e 후 해제.\u003c/li\u003e\n\u003cli\u003e큰 구조체는 \u003cstrong\u003e비트필드\u003c/strong\u003e/Packing, Align 비용 점검.\u003c/li\u003e\n\u003cli\u003e템플릿/인라인 남용 자제(ROM 팽창 유발).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-링커-스크립트섹션\"\u003e4) 링커 스크립트/섹션\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e미사용 섹션 제거(\u003ccode\u003e--gc-sections\u003c/code\u003e)가 \u003cstrong\u003e실제 적용되는지\u003c/strong\u003e \u003ccode\u003enm/objdump\u003c/code\u003e로 확인.\u003c/li\u003e\n\u003cli\u003eStart-up/ISR 테이블 최소화, 약결 사용(weak)로 불필요 핸들러 제거.\u003c/li\u003e\n\u003cli\u003e부트로더/앱 \u003cstrong\u003eA/B 파티션\u003c/strong\u003e 설계 시 중복 코드를 공용화.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"5-측정-루틴\"\u003e5) 측정 루틴\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e바이너리 크기: \u003ccode\u003esize firmware.elf\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e섹션별: \u003ccode\u003earm-none-eabi-size -A firmware.elf\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e기여도 분석: \u003ccode\u003enm --size-sort firmware.elf | tail\u003c/code\u003e / \u003ccode\u003eobjdump -d\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e변경 전후 비교 스크립트로 \u003cstrong\u003e회귀 감시\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"6-실무-팁\"\u003e6) 실무 팁\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e최적화는 \u003cstrong\u003e측정-적용-재측정\u003c/strong\u003e 루프. “감”으로 하지 말 것.\u003c/li\u003e\n\u003cli\u003e기능 플래그(예: \u003ccode\u003eFEATURE_X=ON/OFF\u003c/code\u003e)로 \u003cstrong\u003e제품 변형\u003c/strong\u003e을 빌드타임 분기.\u003c/li\u003e\n\u003cli\u003eOTA/로그 등 \u003cstrong\u003e운영 기능\u003c/strong\u003e은 크기·전력·성능 트레이드오프를 명시.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"체크리스트-복붙해서-쓰세요\"\u003e체크리스트 (복붙해서 쓰세요)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003e-Os -ffunction-sections -fdata-sections -Wl,--gc-sections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003e-flto\u003c/code\u003e + LTO 호환 링커\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e newlib-nano / printf float 최소화\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 릴리스 로그 제거 / 예외·RTTI 비활성\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e const 데이터 플래시 고정 / LUT 최적화\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 링커 스크립트 검토 / 미사용 ISR 제거\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003esize/nm/objdump\u003c/code\u003e 자동 리포팅\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"연계-글-예정\"\u003e연계 글 (예정)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e“부트로더 A/B + 안전 롤백 설계”\u003c/li\u003e\n\u003cli\u003e“에너지 예산 기반 최적화(전력·성능·메모리 균형)”\u003c/li\u003e\n\u003c/ul\u003e","title":"IoT 타깃 소형화 전략: 바이너리·메모리 최적화 체크리스트"},{"content":"개요 가볍고 이식성 높은 Unity + CMock 조합과 CMake/CTest로 “호스트에서 빠른 유닛 테스트 → 선택적 QEMU 통합 스모크”를 만드는 실습 가이드입니다. 크로스 환경 의존을 최소화하고, HIL 전에 최대한 논리 버그를 제거하는 게 목표입니다.\n1) 폴더 구조(예시) project/ ├─ src/ # 제품 코드 ├─ include/ # 헤더 ├─ tests/ │ ├─ unit/ # 유닛 테스트 │ └─ integration/ # 통합 테스트 (QEMU 스모크 포함) ├─ third_party/ │ ├─ unity/ │ └─ cmock/ └─ CMakeLists.txt 2) 의존성 (간단 설치) # Unity \u0026amp; CMock 가져오기 (서브모듈 권장) git submodule add https://github.com/ThrowTheSwitch/Unity third_party/unity git submodule add https://github.com/ThrowTheSwitch/CMock third_party/cmock 3) 유닛 테스트 샘플 src/ringbuf.c를 예로:\n// include/ringbuf.h #pragma once #include \u0026lt;stdint.h\u0026gt; typedef struct { uint8_t* buf; int cap, head, tail; } ringbuf_t; void rb_init(ringbuf_t* rb, uint8_t* mem, int cap); int rb_push(ringbuf_t* rb, uint8_t v); int rb_pop(ringbuf_t* rb, uint8_t* out); int rb_size(const ringbuf_t* rb); // tests/unit/test_ringbuf.c #include \u0026#34;unity.h\u0026#34; #include \u0026#34;ringbuf.h\u0026#34; static uint8_t mem[8]; static ringbuf_t rb; void setUp(void){ rb_init(\u0026amp;rb, mem, 8); } void tearDown(void){} void test_push_and_pop(void){ TEST_ASSERT_EQUAL_INT(0, rb_size(\u0026amp;rb)); TEST_ASSERT_TRUE(rb_push(\u0026amp;rb, 0x11)); TEST_ASSERT_EQUAL_INT(1, rb_size(\u0026amp;rb)); uint8_t v=0; TEST_ASSERT_TRUE(rb_pop(\u0026amp;rb, \u0026amp;v)); TEST_ASSERT_EQUAL_HEX8(0x11, v); } CMakeLists.txt(요지):\nadd_executable(test_ringbuf tests/unit/test_ringbuf.c src/ringbuf.c third_party/unity/src/unity.c ) target_include_directories(test_ringbuf PRIVATE include third_party/unity/src) add_test(NAME test_ringbuf COMMAND test_ringbuf) 4) CMock로 HAL 모킹 하드웨어 접근 함수가 있는 hal_uart.h를 모킹:\n// include/hal_uart.h #pragma once int hal_uart_write(const char* data, int len); CMock로 모의 생성(빌드 스텝 or 사전 생성):\nruby third_party/cmock/vendor/cmock/lib/cmock.rb -o config.yml include/hal_uart.h # → mocks/Mockhal_uart.c, Mockhal_uart.h 생성 테스트에서 사용:\n#include \u0026#34;unity.h\u0026#34; #include \u0026#34;Mockhal_uart.h\u0026#34; // CMock 생성 헤더 #include \u0026#34;proto.h\u0026#34; // 테스트 대상 void test_proto_send_hello(void){ hal_uart_write_ExpectAndReturn(\u0026#34;HELLO\u0026#34;, 5, 5); TEST_ASSERT_TRUE(proto_send_hello()); } 5) QEMU로 통합 스모크(옵션) ARM Cortex-M 계열은 qemu-system-gnuarmeclipse 또는 qemu-system-arm 사용. 부팅 메시지 / 특정 레지스터 초기화 여부 검증처럼 HIL 전 가벼운 연기. 예시(아이디어):\nqemu-system-arm -M stm32-p103 -kernel build/firmware.elf -nographic -serial stdio | tee qemu.log grep \u0026#34;Boot OK\u0026#34; qemu.log 6) CI 팁 유닛 테스트는 호스트 런타임으로 빠르게(초·분 단위). CMock 생성은 캐시하거나 CI에서 Ruby 세팅을 넣어 반복 실행. QEMU 스모크는 PR 라벨/경로 조건으로 선택 실행. 마무리 체크 HAL 경유 \u0026amp; CMock 모킹이 자연스럽게 돌아가는가? 경계값(버퍼/타이밍아웃) 테스트가 포함되어 있는가? 유닛 → 통합 → HIL로 점진 강화되고 있는가? 연계 글 (예정) “테스트 더블 패턴 모음(Stub/Fake/Spy/Mock)과 C 언어 적용법” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-unit-integration-cmake/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e가볍고 이식성 높은 \u003cstrong\u003eUnity + CMock\u003c/strong\u003e 조합과 \u003cstrong\u003eCMake/CTest\u003c/strong\u003e로 “호스트에서 빠른 유닛 테스트 → 선택적 QEMU 통합 스모크”를 만드는 실습 가이드입니다. \u003cstrong\u003e크로스 환경 의존을 최소화\u003c/strong\u003e하고, \u003cstrong\u003eHIL 전\u003c/strong\u003e에 최대한 논리 버그를 제거하는 게 목표입니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-폴더-구조예시\"\u003e1) 폴더 구조(예시)\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eproject/\n ├─ src/                # 제품 코드\n ├─ include/            # 헤더\n ├─ tests/\n │   ├─ unit/           # 유닛 테스트\n │   └─ integration/    # 통합 테스트 (QEMU 스모크 포함)\n ├─ third_party/\n │   ├─ unity/\n │   └─ cmock/\n └─ CMakeLists.txt\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"2-의존성-간단-설치\"\u003e2) 의존성 (간단 설치)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Unity \u0026amp; CMock 가져오기 (서브모듈 권장)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule add https://github.com/ThrowTheSwitch/Unity third_party/unity\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule add https://github.com/ThrowTheSwitch/CMock third_party/cmock\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"3-유닛-테스트-샘플\"\u003e3) 유닛 테스트 샘플\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003esrc/ringbuf.c\u003c/code\u003e를 예로:\u003c/p\u003e","title":"임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+CMake+QEMU)"},{"content":"개요 하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 초기 설계 품질 + 자동화된 검증 체계로 결정됩니다.\n이 글은 “테스트 피라미드(유닛:통합:HIL ≈ 70:20:10), 테스트 친화 설계, CI 파이프라인”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.\n1) 핵심 전략 요약 테스트 피라미드: 유닛(최다) → 통합(선별) → HIL(임계경로 위주). 테스트 친화 설계(Design for Testability): HAL(하드웨어 추상화)로 의존성 분리. 링커 대체/약결(symbol weak), 함수 포인터 주입, 인터페이스(ports/adapters). 빌드 분리: Debug/Release/Test(테스트 전용 설정·스텁 허용). CI 파이프라인: Host(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크. 실패 시 아티팩트/로그 자동 첨부로 디버깅 시간 절감. 2) 레벨별 테스트 설계 2.1 유닛 테스트 “입출력 결정성”이 높은 순서로 작성. 순수 함수부터. C 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움. 링커 치환: -Wl,--wrap=foo로 하드웨어 의존 함수를 테스트 더블로 대체. 2.2 통합 테스트 드라이버+프로토콜 등 두 모듈 이상 결합 검증. 타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시. 시리얼·SPI 등은 Loopback/Fake HAL로 먼저 검증한 뒤 실제 보드로 축소 실행. 2.3 HIL(하드웨어 인더루프) 임계경로만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환. 자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 스모크는 가능. **롤백 가능한 펌업(OTA)**와 Watchdog 스크립트화. 3) CMake + CTest + Coverage 예시 # CMakeLists.txt (테스트 전용) enable_testing() add_executable(my_unit_tests tests/foo_test.c src/foo.c ) target_compile_options(my_unit_tests PRIVATE -O0 -g --coverage) target_link_libraries(my_unit_tests PRIVATE m gcov) add_test(NAME foo_test COMMAND my_unit_tests) # 실행 \u0026amp; 커버리지 ctest --output-on-failure lcov --directory . --capture --output-file coverage.info genhtml coverage.info --output-directory coverage_html 4) GitHub Actions 매트릭스(요지) jobs: test-build: runs-on: ubuntu-latest strategy: matrix: target: [host, arm-none-eabi] steps: - uses: actions/checkout@v4 with: { submodules: true } - name: Host test if: matrix.target == \u0026#39;host\u0026#39; run: | cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug cmake --build build -j ctest --test-dir build --output-on-failure - name: Cross build if: matrix.target == \u0026#39;arm-none-eabi\u0026#39; run: | cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake cmake --build build-arm -j 5) 실무 체크리스트 테스트 대상 코드는 하드웨어 접근을 직접 하지 않도록 HAL 경유. 타이밍 의존 로직은 클럭/타이머 인터페이스로 추상화. **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함. UBSan/ASan은 Host에서 최대한 사용(베어메탈은 제한). 실패 로그/아티팩트를 CI에서 자동 보존. 연계 글 (예정) “임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)” “HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 \u003cstrong\u003e초기 설계 품질 + 자동화된 검증 체계\u003c/strong\u003e로 결정됩니다.\u003cbr\u003e\n이 글은 “\u003cstrong\u003e테스트 피라미드\u003c/strong\u003e(유닛:통합:HIL ≈ \u003cstrong\u003e70:20:10\u003c/strong\u003e), \u003cstrong\u003e테스트 친화 설계\u003c/strong\u003e, \u003cstrong\u003eCI 파이프라인\u003c/strong\u003e”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-핵심-전략-요약\"\u003e1) 핵심 전략 요약\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e테스트 피라미드\u003c/strong\u003e: 유닛(최다) → 통합(선별) → HIL(임계경로 위주).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e테스트 친화 설계(Design for Testability)\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eHAL(하드웨어 추상화)로 \u003cstrong\u003e의존성 분리\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e링커 대체/약결(symbol weak)\u003c/strong\u003e, \u003cstrong\u003e함수 포인터 주입\u003c/strong\u003e, \u003cstrong\u003e인터페이스(ports/adapters)\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e빌드 분리: \u003ccode\u003eDebug/Release/Test\u003c/code\u003e(테스트 전용 설정·스텁 허용).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCI 파이프라인\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eHost(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크.\u003c/li\u003e\n\u003cli\u003e실패 시 \u003cstrong\u003e아티팩트/로그\u003c/strong\u003e 자동 첨부로 디버깅 시간 절감.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-레벨별-테스트-설계\"\u003e2) 레벨별 테스트 설계\u003c/h2\u003e\n\u003ch3 id=\"21-유닛-테스트\"\u003e2.1 유닛 테스트\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e“입출력 결정성”이 높은 순서로 작성. \u003cstrong\u003e순수 함수\u003c/strong\u003e부터.\u003c/li\u003e\n\u003cli\u003eC 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e링커 치환\u003c/strong\u003e: \u003ccode\u003e-Wl,--wrap=foo\u003c/code\u003e로 하드웨어 의존 함수를 테스트 더블로 대체.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"22-통합-테스트\"\u003e2.2 통합 테스트\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e드라이버+프로토콜 등 \u003cstrong\u003e두 모듈 이상 결합\u003c/strong\u003e 검증.\u003c/li\u003e\n\u003cli\u003e타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시.\u003c/li\u003e\n\u003cli\u003e시리얼·SPI 등은 \u003cstrong\u003eLoopback/Fake HAL\u003c/strong\u003e로 먼저 검증한 뒤 실제 보드로 축소 실행.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"23-hil하드웨어-인더루프\"\u003e2.3 HIL(하드웨어 인더루프)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e임계경로\u003c/strong\u003e만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환.\u003c/li\u003e\n\u003cli\u003e자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 \u003cstrong\u003e스모크\u003c/strong\u003e는 가능.\u003c/li\u003e\n\u003cli\u003e**롤백 가능한 펌업(OTA)**와 \u003cstrong\u003eWatchdog\u003c/strong\u003e 스크립트화.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-cmake--ctest--coverage-예시\"\u003e3) CMake + CTest + Coverage 예시\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cmake\" data-lang=\"cmake\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# CMakeLists.txt (테스트 전용)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eenable_testing\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eadd_executable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003etests/foo_test.c\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003esrc/foo.c\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003etarget_compile_options\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e \u003cspan class=\"s\"\u003ePRIVATE\u003c/span\u003e \u003cspan class=\"s\"\u003e-O0\u003c/span\u003e \u003cspan class=\"s\"\u003e-g\u003c/span\u003e \u003cspan class=\"s\"\u003e--coverage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003etarget_link_libraries\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e \u003cspan class=\"s\"\u003ePRIVATE\u003c/span\u003e \u003cspan class=\"s\"\u003em\u003c/span\u003e \u003cspan class=\"s\"\u003egcov\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eadd_test\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003eNAME\u003c/span\u003e \u003cspan class=\"s\"\u003efoo_test\u003c/span\u003e \u003cspan class=\"s\"\u003eCOMMAND\u003c/span\u003e \u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 실행 \u0026amp; 커버리지\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ectest --output-on-failure\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003elcov --directory . --capture --output-file coverage.info\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egenhtml coverage.info --output-directory coverage_html\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"4-github-actions-매트릭스요지\"\u003e4) GitHub Actions 매트릭스(요지)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003etest-build\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eruns-on\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eubuntu-latest\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003estrategy\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"l\"\u003ehost, arm-none-eabi]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003esteps\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003euses\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eactions/checkout@v4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e{\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nt\"\u003esubmodules\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e}\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eHost test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ematrix.target == \u0026#39;host\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"sd\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake --build build -j\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          ctest --test-dir build --output-on-failure\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eCross build\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ematrix.target == \u0026#39;arm-none-eabi\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"sd\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake --build build-arm -j\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"5-실무-체크리스트\"\u003e5) 실무 체크리스트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 테스트 대상 코드는 \u003cstrong\u003e하드웨어 접근을 직접 하지 않도록\u003c/strong\u003e HAL 경유.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 타이밍 의존 로직은 \u003cstrong\u003e클럭/타이머 인터페이스\u003c/strong\u003e로 추상화.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003cstrong\u003eUBSan/ASan\u003c/strong\u003e은 Host에서 최대한 사용(베어메탈은 제한).\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 실패 로그/아티팩트를 CI에서 자동 보존.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"연계-글-예정\"\u003e연계 글 (예정)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e“임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)”\u003c/li\u003e\n\u003cli\u003e“HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증”\u003c/li\u003e\n\u003c/ul\u003e","title":"임베디드 코드 품질 개선을 위한 테스트 전략 (정리판)"},{"content":"개요 임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 실시간성을 고려해야 합니다. 이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다. 본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.\n1) 전통적 개발 방법론 워터폴 모델 — 핵심 요약 요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행 장점: 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리 단점: 요구사항 변경에 취약, 환경 변동성 반영 어려움 부연 설명 하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다. 다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.\nV-모델 — 핵심 요약 워터폴 확장형: 각 설계 단계에 상응하는 검증 단계가 1:1로 매칭 장점: 설계-검증 트레이스가 선명, 안전/규제 산업에 적합 단점: 초기 설계 오류가 뒤늦게 발견되면 비용 큼 부연 설명 자동차 ECU, 의료기기 등에서는 요구사항→시스템설계→SW/HW설계 단계가 테스트 계획과 함께 동반됩니다. “통합 설계 ↔ 통합 테스트”, “코드 구현 ↔ 단위 테스트”처럼 좌우가 대응합니다.\n2) 현대적 개발 방법론 애자일(Agile) — 핵심 요약 반복/점진 개발로 변화 수용성을 극대화 장점: 프로토타이핑·시장 검증이 빠른 제품에 적합 실무 팁: Sprint마다 크로스 컴파일·펌웨어 배포·보드 테스트를 CI로 자동화 부연 설명 하드웨어 플래싱/리그 세팅이 병목이 되기 쉬우므로,\n펌웨어 버전 태깅, 자동 아티팩트 업로드 HIL(하드웨어-in-the-loop) 테스트 일부 자동화 실패 시 보드 롤백 스크립트 같은 보조 장치를 함께 준비하면 애자일의 강점을 살릴 수 있습니다. 모델 기반 개발(MBD) — 핵심 요약 모델(예: Simulink)로 설계·시뮬레이션 후 코드 자동생성 장점: 제어 알고리즘 개발/검증 효율적, 초기 결함 조기 발견 적용: 로보틱스, 드론, 파워 일렉트로닉스 등 부연 설명 예) 드론 고도 제어 PID를 모델로 검증 → 코드 자동생성 → STM32/ESP32 포팅. 모델-코드 추적성 확보와 오토코드 룰 체크(코딩 가이드 준수)가 포인트입니다.\n3) 품질 보증과 테스트 연결 단위 테스트: 드라이버·라이브러리 단위 기능 검증 통합 테스트: 보드 입출력(UART/SPI/I2C/GPIO)과 상위 로직 결합 검증 CI/CD: 크로스 컴파일 → 펌웨어 산출물 버전체계 → 자동 플래싱/스모크 테스트 👉 다음 편 예고: 임베디드 코드 품질 개선을 위한 테스트 전략\n4) 선택 가이드 요약 하드웨어 변경 적고 규격 고정 → V-모델/워터폴 빠른 출시·요구 변경 많음 → 애자일 제어/안전 중요 → MBD 현실적으로는 하이브리드가 최선: 초기 요구/아키텍처는 V-모델, 기능 확장은 애자일, 제어는 MBD. 연계 페이지 (작성 예정) 임베디드 요구사항 정의 체크리스트 임베디드 CI/CD 환경 구축 가이드 자동차 ECU 개발과 V-모델 사례 MBD와 코드 자동 생성 사례 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 \u003cstrong\u003e실시간성\u003c/strong\u003e을 고려해야 합니다.\n이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다.\n본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-전통적-개발-방법론\"\u003e1) 전통적 개발 방법론\u003c/h2\u003e\n\u003ch3 id=\"워터폴-모델--핵심-요약\"\u003e워터폴 모델 — 핵심 요약\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e장점:\u003c/strong\u003e 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e단점:\u003c/strong\u003e 요구사항 변경에 취약, 환경 변동성 반영 어려움\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e부연 설명\u003c/strong\u003e\n하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다.\n다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.\u003c/p\u003e","title":"임베디드 시스템 개발 방법론 정리 (확장판)"}]