[{"content":"개요 임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 실시간성을 고려해야 합니다. 이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다. 본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.\n1) 전통적 개발 방법론 워터폴 모델 — 핵심 요약 요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행 장점: 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리 단점: 요구사항 변경에 취약, 환경 변동성 반영 어려움 부연 설명 하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다. 다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.\nV-모델 — 핵심 요약 워터폴 확장형: 각 설계 단계에 상응하는 검증 단계가 1:1로 매칭 장점: 설계-검증 트레이스가 선명, 안전/규제 산업에 적합 단점: 초기 설계 오류가 뒤늦게 발견되면 비용 큼 부연 설명 자동차 ECU, 의료기기 등에서는 요구사항→시스템설계→SW/HW설계 단계가 테스트 계획과 함께 동반됩니다. “통합 설계 ↔ 통합 테스트”, “코드 구현 ↔ 단위 테스트”처럼 좌우가 대응합니다.\n2) 현대적 개발 방법론 애자일(Agile) — 핵심 요약 반복/점진 개발로 변화 수용성을 극대화 장점: 프로토타이핑·시장 검증이 빠른 제품에 적합 실무 팁: Sprint마다 크로스 컴파일·펌웨어 배포·보드 테스트를 CI로 자동화 부연 설명 하드웨어 플래싱/리그 세팅이 병목이 되기 쉬우므로,\n펌웨어 버전 태깅, 자동 아티팩트 업로드 HIL(하드웨어-in-the-loop) 테스트 일부 자동화 실패 시 보드 롤백 스크립트 같은 보조 장치를 함께 준비하면 애자일의 강점을 살릴 수 있습니다. 모델 기반 개발(MBD) — 핵심 요약 모델(예: Simulink)로 설계·시뮬레이션 후 코드 자동생성 장점: 제어 알고리즘 개발/검증 효율적, 초기 결함 조기 발견 적용: 로보틱스, 드론, 파워 일렉트로닉스 등 부연 설명 예) 드론 고도 제어 PID를 모델로 검증 → 코드 자동생성 → STM32/ESP32 포팅. 모델-코드 추적성 확보와 오토코드 룰 체크(코딩 가이드 준수)가 포인트입니다.\n3) 품질 보증과 테스트 연결 단위 테스트: 드라이버·라이브러리 단위 기능 검증 통합 테스트: 보드 입출력(UART/SPI/I2C/GPIO)과 상위 로직 결합 검증 CI/CD: 크로스 컴파일 → 펌웨어 산출물 버전체계 → 자동 플래싱/스모크 테스트 👉 다음 편 예고: 임베디드 코드 품질 개선을 위한 테스트 전략\n4) 선택 가이드 요약 하드웨어 변경 적고 규격 고정 → V-모델/워터폴 빠른 출시·요구 변경 많음 → 애자일 제어/안전 중요 → MBD 현실적으로는 하이브리드가 최선: 초기 요구/아키텍처는 V-모델, 기능 확장은 애자일, 제어는 MBD. 연계 페이지 (작성 예정) 임베디드 요구사항 정의 체크리스트 임베디드 CI/CD 환경 구축 가이드 자동차 ECU 개발과 V-모델 사례 MBD와 코드 자동 생성 사례 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 \u003cstrong\u003e실시간성\u003c/strong\u003e을 고려해야 합니다.\n이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다.\n본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-전통적-개발-방법론\"\u003e1) 전통적 개발 방법론\u003c/h2\u003e\n\u003ch3 id=\"워터폴-모델--핵심-요약\"\u003e워터폴 모델 — 핵심 요약\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e장점:\u003c/strong\u003e 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e단점:\u003c/strong\u003e 요구사항 변경에 취약, 환경 변동성 반영 어려움\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e부연 설명\u003c/strong\u003e\n하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다.\n다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.\u003c/p\u003e","title":"임베디드 시스템 개발 방법론 정리 (확장판)"}]