[{"content":"개요 플래시/램이 작은 IoT 보드에서 1KB가 제품 기능 하나를 살리기도 합니다.\n아래 체크리스트를 순서대로 적용하면, 빌드만 바꿔도 수~수십 % 사이즈 절감이 가능해집니다.\n1) 컴파일러/링커 플래그 컴파일: -Os -ffunction-sections -fdata-sections 링커: -Wl,--gc-sections LTO: -flto (+ 링커가 LTO 대응인지 확인) C++: 예외/RTTI 비활성 → -fno-exceptions -fno-rtti 로그 레벨 매크로로 릴리스에서 로그 제거: #if LOG_LEVEL \u0026lt; INFO #define LOGI(...) ((void)0) #endif 2) 표준 라이브러리 선택 newlib-nano: -specs=nano.specs / -u _printf_float(필요한 경우에만 float 지원) C++ iostream 대신 printf류 사용(필요 최소한). 동적할당 최소화: TLSF/정적 풀 등 고정할당자 고려. 3) 코드 구조·데이터 const 데이터는 플래시에(플랫폼 매크로/속성 활용: __attribute__((section(\u0026quot;.rodata\u0026quot;))) or PROGMEM). Look-up table은 압축/축소(정밀도 다운샘플) 후 해제. 큰 구조체는 비트필드/Packing, Align 비용 점검. 템플릿/인라인 남용 자제(ROM 팽창 유발). 4) 링커 스크립트/섹션 미사용 섹션 제거(--gc-sections)가 실제 적용되는지 nm/objdump로 확인. Start-up/ISR 테이블 최소화, 약결 사용(weak)로 불필요 핸들러 제거. 부트로더/앱 A/B 파티션 설계 시 중복 코드를 공용화. 5) 측정 루틴 바이너리 크기: size firmware.elf 섹션별: arm-none-eabi-size -A firmware.elf 기여도 분석: nm --size-sort firmware.elf | tail / objdump -d 변경 전후 비교 스크립트로 회귀 감시. 6) 실무 팁 최적화는 측정-적용-재측정 루프. “감”으로 하지 말 것. 기능 플래그(예: FEATURE_X=ON/OFF)로 제품 변형을 빌드타임 분기. OTA/로그 등 운영 기능은 크기·전력·성능 트레이드오프를 명시. 체크리스트 (복붙해서 쓰세요) -Os -ffunction-sections -fdata-sections -Wl,--gc-sections -flto + LTO 호환 링커 newlib-nano / printf float 최소화 릴리스 로그 제거 / 예외·RTTI 비활성 const 데이터 플래시 고정 / LUT 최적화 링커 스크립트 검토 / 미사용 ISR 제거 size/nm/objdump 자동 리포팅 연계 글 (예정) “부트로더 A/B + 안전 롤백 설계” “에너지 예산 기반 최적화(전력·성능·메모리 균형)” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/iot-binary-size-optimization/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e플래시/램이 작은 IoT 보드에서 \u003cstrong\u003e1KB가 제품 기능 하나를 살리기도\u003c/strong\u003e 합니다.\u003cbr\u003e\n아래 체크리스트를 순서대로 적용하면, 빌드만 바꿔도 \u003cstrong\u003e수~수십 %\u003c/strong\u003e 사이즈 절감이 가능해집니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-컴파일러링커-플래그\"\u003e1) 컴파일러/링커 플래그\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e컴파일: \u003ccode\u003e-Os -ffunction-sections -fdata-sections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e링커: \u003ccode\u003e-Wl,--gc-sections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLTO: \u003ccode\u003e-flto\u003c/code\u003e (+ 링커가 LTO 대응인지 확인)\u003c/li\u003e\n\u003cli\u003eC++: 예외/RTTI 비활성 → \u003ccode\u003e-fno-exceptions -fno-rtti\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e로그 레벨 매크로로 \u003cstrong\u003e릴리스에서 로그 제거\u003c/strong\u003e:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#if LOG_LEVEL \u0026lt; INFO\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#define LOGI(...) ((void)0)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-표준-라이브러리-선택\"\u003e2) 표준 라이브러리 선택\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003enewlib-nano\u003c/strong\u003e: \u003ccode\u003e-specs=nano.specs\u003c/code\u003e / \u003ccode\u003e-u _printf_float\u003c/code\u003e(필요한 경우에만 float 지원)\u003c/li\u003e\n\u003cli\u003eC++ iostream 대신 \u003ccode\u003eprintf\u003c/code\u003e류 사용(필요 최소한).\u003c/li\u003e\n\u003cli\u003e동적할당 최소화: TLSF/정적 풀 등 \u003cstrong\u003e고정할당자\u003c/strong\u003e 고려.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-코드-구조데이터\"\u003e3) 코드 구조·데이터\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003econst 데이터는 플래시에\u003c/strong\u003e(플랫폼 매크로/속성 활용: \u003ccode\u003e__attribute__((section(\u0026quot;.rodata\u0026quot;)))\u003c/code\u003e or \u003ccode\u003ePROGMEM\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eLook-up table은 \u003cstrong\u003e압축/축소(정밀도 다운샘플)\u003c/strong\u003e 후 해제.\u003c/li\u003e\n\u003cli\u003e큰 구조체는 \u003cstrong\u003e비트필드\u003c/strong\u003e/Packing, Align 비용 점검.\u003c/li\u003e\n\u003cli\u003e템플릿/인라인 남용 자제(ROM 팽창 유발).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-링커-스크립트섹션\"\u003e4) 링커 스크립트/섹션\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e미사용 섹션 제거(\u003ccode\u003e--gc-sections\u003c/code\u003e)가 \u003cstrong\u003e실제 적용되는지\u003c/strong\u003e \u003ccode\u003enm/objdump\u003c/code\u003e로 확인.\u003c/li\u003e\n\u003cli\u003eStart-up/ISR 테이블 최소화, 약결 사용(weak)로 불필요 핸들러 제거.\u003c/li\u003e\n\u003cli\u003e부트로더/앱 \u003cstrong\u003eA/B 파티션\u003c/strong\u003e 설계 시 중복 코드를 공용화.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"5-측정-루틴\"\u003e5) 측정 루틴\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e바이너리 크기: \u003ccode\u003esize firmware.elf\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e섹션별: \u003ccode\u003earm-none-eabi-size -A firmware.elf\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e기여도 분석: \u003ccode\u003enm --size-sort firmware.elf | tail\u003c/code\u003e / \u003ccode\u003eobjdump -d\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e변경 전후 비교 스크립트로 \u003cstrong\u003e회귀 감시\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"6-실무-팁\"\u003e6) 실무 팁\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e최적화는 \u003cstrong\u003e측정-적용-재측정\u003c/strong\u003e 루프. “감”으로 하지 말 것.\u003c/li\u003e\n\u003cli\u003e기능 플래그(예: \u003ccode\u003eFEATURE_X=ON/OFF\u003c/code\u003e)로 \u003cstrong\u003e제품 변형\u003c/strong\u003e을 빌드타임 분기.\u003c/li\u003e\n\u003cli\u003eOTA/로그 등 \u003cstrong\u003e운영 기능\u003c/strong\u003e은 크기·전력·성능 트레이드오프를 명시.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"체크리스트-복붙해서-쓰세요\"\u003e체크리스트 (복붙해서 쓰세요)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003e-Os -ffunction-sections -fdata-sections -Wl,--gc-sections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003e-flto\u003c/code\u003e + LTO 호환 링커\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e newlib-nano / printf float 최소화\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 릴리스 로그 제거 / 예외·RTTI 비활성\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e const 데이터 플래시 고정 / LUT 최적화\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 링커 스크립트 검토 / 미사용 ISR 제거\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003esize/nm/objdump\u003c/code\u003e 자동 리포팅\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"연계-글-예정\"\u003e연계 글 (예정)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e“부트로더 A/B + 안전 롤백 설계”\u003c/li\u003e\n\u003cli\u003e“에너지 예산 기반 최적화(전력·성능·메모리 균형)”\u003c/li\u003e\n\u003c/ul\u003e","title":"IoT 타깃 소형화 전략: 바이너리·메모리 최적화 체크리스트"},{"content":"개요 현장 장비의 펌웨어 업데이트(OTA)는 가용성·보안·복구성이 핵심입니다. 이 문서는 A/B 슬롯 전략 + 서명/무결성 검증 + 점진적 배포를 축으로 한 엔드투엔드 파이프라인을 정리합니다. 목표는 “중단 없이, 위변조 없이, 실패해도 자동 복구” 입니다.\n핵심 개념 / 설계 포인트 서명과 무결성: 이미지 SHA-256 해시 + 서명(Ed25519/ECDSA) + 메타데이터를 번들로 관리. A/B 파티션: 비활성 슬롯에 다운로드→검증→스위치. 부팅 성공 신호 없으면 자동 롤백. 메타데이터(Manifest): 버전, 타깃(보드/SoC), 빌드 타임, 해시, 최소 부트로더/SE 버전, anti-rollback 카운터. 전송 보안: 서버↔디바이스 TLS/DTLS + 서버 측 토큰/기기 인증. 전송 보안 ≠ 이미지 신뢰. 신뢰 루트: 부트로더에 공개키 고정(ROM/섹션). 키 교체는 롤링 방식(Trust Anchor version). 대상 선정/점진 배포: 롤링 퍼센트(1%→10%→50%→100%), 지역/모델/펌웨어 라인업 기반 타겟팅. 중단 내성: 청크 다운로드 + 재시작 재개 + 이중 버퍼링 + 저널링/원자 스위치. 로깅/관측성: 기기별 업데이트 이력, 실패코드, 롤백 사유, 배포 cohort 성과. 시스템 구성(참고 아키텍처) Developer → CI(빌드/사인) → Artifact Store(CDN/S3) │ ↑ └─ Backend(메타/대상선정/토큰) ─→ Device(Agent) ↓ Bootloader(Verify/Swap/Rollback) CI: 펌웨어 빌드, 해시 산출, 오프라인 서명(가능하면 HSM). Artifact Store: 압축된 펌웨어 + manifest. Range 요청/Resume 지원. Backend: 대상 선택, 배포 라운드, 토큰 발급, 통계 수집. Device Agent: 다운로드/검증/스위치 요청/헬스체크 보고. Bootloader: 유일한 신뢰 판단자. 공개키로 manifest+이미지 검증. Manifest 포맷(예시, JSON) { \u0026#34;board\u0026#34;: \u0026#34;nx3000\u0026#34;, \u0026#34;soc\u0026#34;: \u0026#34;stm32h7\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.4.3\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;2025-08-20T13:55:21Z\u0026#34;, \u0026#34;min_boot\u0026#34;: 3, \u0026#34;anti_rollback\u0026#34;: 42, \u0026#34;image\u0026#34;: { \u0026#34;filename\u0026#34;: \u0026#34;app_v1.4.3.bin\u0026#34;, \u0026#34;size\u0026#34;: 524288, \u0026#34;sha256\u0026#34;: \u0026#34;3f5c...ab9d\u0026#34; }, \u0026#34;sign\u0026#34;: { \u0026#34;alg\u0026#34;: \u0026#34;Ed25519\u0026#34;, \u0026#34;pub_key_id\u0026#34;: \u0026#34;k-2025-q3\u0026#34;, \u0026#34;sig\u0026#34;: \u0026#34;base64-encoded-signature\u0026#34; } } anti_rollback: 부트로더 카운터 \u0026gt;= 값이어야 설치 허용. pub_key_id: 키 롤오버 시 버전을 구분(구 키 폐기 시점 통제). 서명 파이프라인(오프라인 예시) # 1) 해시 생성 sha256sum app.bin \u0026gt; app.bin.sha256 # 2) Ed25519 키 생성(오프라인/보안 저장) openssl genpkey -algorithm Ed25519 -out ed25519_priv.pem openssl pkey -in ed25519_priv.pem -pubout -out ed25519_pub.pem # 3) 서명 openssl pkeyutl -sign -inkey ed25519_priv.pem -in app.bin -out app.bin.sig # 4) 서명 검증(빌드 서버/테스트) openssl pkeyutl -verify -pubin -inkey ed25519_pub.pem -sigfile app.bin.sig -in app.bin 실제 배포에서는 manifest 전체(메타+해시)를 서명하는 방식을 권장. 서명 전용 키는 HSM/YubiKey/전용 키 관리 서버에 보관.\n부트로더 검증(의사코드) bool verify_image(const manifest_t* m, const uint8_t* img, size_t img_len) { if (!version_ok(m-\u0026gt;min_boot) || anti_rollback_counter() \u0026lt; m-\u0026gt;anti_rollback) return false; uint8_t h[32]; sha256(img, img_len, h); if (memcmp(h, m-\u0026gt;image.sha256, 32) != 0) return false; if (!ed25519_verify(m-\u0026gt;sign.sig, (uint8_t*)m, manifest_signed_len(m), m-\u0026gt;sign.pub_key_id)) return false; return true; } ed25519_verify(...): 펌웨어에 포함된 공개키 테이블 또는 신뢰 앵커에서 pub_key_id에 해당하는 키 사용. manifest_signed_len(m): 서명 대상 구간(manifest에서 sig 필드 제외). A/B + 롤백(요지) 비활성 슬롯(B)에 다운로드 → verify_image. 부팅 대상 전환: boot_slot=B, trial=1, attempts=3 등 설정. 새 앱이 정해진 시간 내 health_ok 보고 → trial=0 → 확정. 미보고/크래시 시 attempts 0이 되면 자동 롤백. 헬스 시그널은 부트로더가 읽을 수 있는 단일 플래그로, 전원 중단에도 안전해야 합니다.\n전송·저장 중단 내성 청크 다운로드/재개: Range: bytes= + 체크섬(블록 단위). 저널링/더블버퍼: manifest/이미지 쓰기 시 원자 갱신 보장. 압축/델타 업데이트: 전체 이미지 대신 bsdiff/zstd 델타(부트로더가 델타 지원하면 가장 이상적). 백엔드: 대상선정 · 배포전략 코호트: 기기 라벨링(모델/지역/펌웨어 채널). 트래픽 제어: 백오프/레이트 제한 + 분산 시작시간. 모니터링: 성공률, 롤백률, 평균 소요시간, 실패 원인 코드(서명/해시/네트워크/스토리지). Threat Model(간략) 전송 중 공격: TLS/DTLS, 토큰/클라이언트 인증으로 완화. (그래도 이미지 자체 서명 검증 필수) 저장 중 위변조: 해시/서명 + anti-rollback(카운터/버전 퓨즈). 키 탈취: 오프라인 서명, 키 롤오버, 다중 담당자 승인(4-eyes), 서명 환경 격리. Downgrade 공격: anti-rollback과 채널 정책(Stable/Beta 분리). 실무 가이드 (체크리스트 중심) Manifest 전체에 서명(메타+이미지 해시 포함). 공개키 신뢰루트를 부트로더에 내장, 키 롤오버 전략 포함. anti-rollback 카운터/버전 퓨즈 도입. 비활성 슬롯(B)에 검증 후 스위치(원자성 보장). 헬스체크/타임박스와 자동 롤백 경로. 청크 다운로드/Resume + 블록 체크섬. 배포는 점진 롤아웃 + 코호트 관리 + 관측성. 실패 로그/원인 코드를 서버로 수집(서명/해시/스토리지/네트워크 구분). 트러블슈팅 빠른 표 증상 의심 포인트 조치 부트 후 즉시 롤백 헬스체크 미신호/타임아웃, attempts 정책 과严 앱 초기화 순서 단축·헬스신호 시점 조정 설치는 되나 부팅 실패 anti-rollback/키 ID/manifest 불일치 빌드/배포 파이프라인의 키/버전 싱크 체크 일부 지역만 실패 CDN/레인지 요청/프록시 이슈 블록 크기/타임아웃 튜닝, 재시도/백오프 간헐적 손상 전원 중단/플래시 wear-level 저널링/원자 쓰기, 배터리 상태 기반 업데이트 연계 글 (예정) “부트로더 Safe Mode + 리커버리 설계” “델타 OTA와 스토리지 레이아웃(분할/정렬/Wear-level)” “키 롤오버와 신뢰 앵커 마이그레이션” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/ota-signed-pipeline/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e현장 장비의 펌웨어 업데이트(OTA)는 \u003cstrong\u003e가용성·보안·복구성\u003c/strong\u003e이 핵심입니다. 이 문서는\n\u003cstrong\u003eA/B 슬롯 전략 + 서명/무결성 검증 + 점진적 배포\u003c/strong\u003e를 축으로 한 \u003cstrong\u003e엔드투엔드 파이프라인\u003c/strong\u003e을 정리합니다.\n목표는 \u003cem\u003e“중단 없이, 위변조 없이, 실패해도 자동 복구”\u003c/em\u003e 입니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"핵심-개념--설계-포인트\"\u003e핵심 개념 / 설계 포인트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e서명과 무결성\u003c/strong\u003e: 이미지 \u003ccode\u003eSHA-256 해시\u003c/code\u003e + \u003ccode\u003e서명(Ed25519/ECDSA)\u003c/code\u003e + \u003ccode\u003e메타데이터\u003c/code\u003e를 \u003cstrong\u003e번들\u003c/strong\u003e로 관리.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eA/B 파티션\u003c/strong\u003e: 비활성 슬롯에 다운로드→검증→스위치. 부팅 성공 신호 없으면 \u003cstrong\u003e자동 롤백\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e메타데이터(Manifest)\u003c/strong\u003e: 버전, 타깃(보드/SoC), 빌드 타임, 해시, 최소 부트로더/SE 버전, \u003cstrong\u003eanti-rollback 카운터\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e전송 보안\u003c/strong\u003e: 서버↔디바이스 \u003cstrong\u003eTLS/DTLS\u003c/strong\u003e + 서버 측 \u003cstrong\u003e토큰/기기 인증\u003c/strong\u003e. 전송 보안 ≠ 이미지 신뢰.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e신뢰 루트\u003c/strong\u003e: 부트로더에 \u003cstrong\u003e공개키 고정\u003c/strong\u003e(ROM/섹션). 키 교체는 롤링 방식(Trust Anchor version).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e대상 선정/점진 배포\u003c/strong\u003e: 롤링 퍼센트(1%→10%→50%→100%), 지역/모델/펌웨어 라인업 기반 타겟팅.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e중단 내성\u003c/strong\u003e: 청크 다운로드 + 재시작 재개 + 이중 버퍼링 + 저널링/원자 스위치.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e로깅/관측성\u003c/strong\u003e: 기기별 업데이트 이력, 실패코드, 롤백 사유, 배포 cohort 성과.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"시스템-구성참고-아키텍처\"\u003e시스템 구성(참고 아키텍처)\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eDeveloper → CI(빌드/사인) → Artifact Store(CDN/S3)\n             │                ↑\n             └─ Backend(메타/대상선정/토큰) ─→ Device(Agent)\n                                       ↓\n                               Bootloader(Verify/Swap/Rollback)\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCI\u003c/strong\u003e: 펌웨어 빌드, 해시 산출, \u003cstrong\u003e오프라인 서명\u003c/strong\u003e(가능하면 HSM).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eArtifact Store\u003c/strong\u003e: 압축된 펌웨어 + manifest. Range 요청/Resume 지원.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBackend\u003c/strong\u003e: 대상 선택, 배포 라운드, 토큰 발급, 통계 수집.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDevice Agent\u003c/strong\u003e: 다운로드/검증/스위치 요청/헬스체크 보고.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBootloader\u003c/strong\u003e: \u003cstrong\u003e유일한 신뢰 판단자\u003c/strong\u003e. 공개키로 manifest+이미지 검증.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"manifest-포맷예시-json\"\u003eManifest 포맷(예시, JSON)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;board\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;nx3000\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;soc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;stm32h7\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;1.4.3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;build\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;2025-08-20T13:55:21Z\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;min_boot\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;anti_rollback\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;filename\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;app_v1.4.3.bin\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;size\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e524288\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;sha256\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;3f5c...ab9d\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;sign\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;alg\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Ed25519\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;pub_key_id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;k-2025-q3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;sig\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;base64-encoded-signature\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eanti_rollback\u003c/code\u003e: 부트로더 \u003cstrong\u003e카운터 \u0026gt;= 값\u003c/strong\u003e이어야 설치 허용.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epub_key_id\u003c/code\u003e: 키 롤오버 시 버전을 구분(구 키 폐기 시점 통제).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"서명-파이프라인오프라인-예시\"\u003e서명 파이프라인(오프라인 예시)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 1) 해시 생성\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esha256sum app.bin \u0026gt; app.bin.sha256\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 2) Ed25519 키 생성(오프라인/보안 저장)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopenssl genpkey -algorithm Ed25519 -out ed25519_priv.pem\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopenssl pkey -in ed25519_priv.pem -pubout -out ed25519_pub.pem\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 3) 서명\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopenssl pkeyutl -sign -inkey ed25519_priv.pem -in app.bin -out app.bin.sig\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 4) 서명 검증(빌드 서버/테스트)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopenssl pkeyutl -verify -pubin -inkey ed25519_pub.pem -sigfile app.bin.sig -in app.bin\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e실제 배포에서는 \u003cstrong\u003emanifest 전체\u003c/strong\u003e(메타+해시)를 서명하는 방식을 권장.\n서명 전용 키는 HSM/YubiKey/전용 키 관리 서버에 보관.\u003c/p\u003e","title":"OTA 업데이트 파이프라인과 이미지 서명 (정리판)"},{"content":"개요 네트워크/스토리지 제약이 큰 디바이스에서는 델타 OTA(이전 버전 대비 차분만 전송)가 큰 이점을 줍니다. 하지만 플래시 정렬/지우기 단위, 전원 중단 내성, Wear-level, 베이스 버전 검증 등 레이아웃 제약을 함께 설계해야 합니다.\n핵심 포인트 델타 형식: bsdiff/xdelta/압축 결합(zstd). MCU에선 스트리밍 적용 가능한 간단 포맷 선호. 베이스 버전 고정: from_version과 베이스 해시를 manifest에 명시, 불일치 시 전체 이미지로 폴백. Out-of-place 적용: 같은 슬롯 내 임시 영역 또는 B슬롯에 패치 적용 후 스왑(권장). 정렬/지우기 단위: NOR(4–64KB), NAND(128KB+) 지우기 단위에 맞춰 청크 경계/쓰기 정렬 유지. 검증: 적용 후 전체 해시 재검증 + 블록 CRC. 전원 끊김 시 재개 지점 기록. Wear-level: 자주 바뀌는 메타/로그는 순환 영역 사용, 델타 임시 파일은 균등 분산. 레이아웃 예시 [Boot] [Env] [A: App] [B: App] [DeltaScratch] [Shared(Log/Meta)] DeltaScratch: 패치 적용 중 임시 저장, 지우기 단위 정렬. Shared: 오류 로그/통계, 롤백 후 원인 분석에 활용. 델타 적용 흐름(의사코드) bool apply_delta(const patch_t* p){ if (!base_version_ok(p-\u0026gt;from_ver) || !base_hash_ok(p-\u0026gt;from_hash)) return false; pos = 0; while (next_chunk(\u0026amp;chunk)){ if (!verify_chunk_crc(\u0026amp;chunk)) return fail_resume(pos); write_aligned(dst, chunk.data, chunk.len); // erase-before-write + align pos += chunk.len; store_resume_marker(pos); } return verify_full_hash(dst, p-\u0026gt;target_hash); } 재개 마커: 전원 실패 후 pos부터 재시작. 마커는 저널 방식/2섹터 토글. Manifest(추가 필드 예시) {{ \u0026#34;from_version\u0026#34;: \u0026#34;1.4.2\u0026#34;, \u0026#34;from_hash\u0026#34;: \u0026#34;base-image-sha256\u0026#34;, \u0026#34;target_version\u0026#34;: \u0026#34;1.4.3\u0026#34;, \u0026#34;target_hash\u0026#34;: \u0026#34;new-image-sha256\u0026#34;, \u0026#34;delta_size\u0026#34;: 183742, \u0026#34;block\u0026#34;: 65536, \u0026#34;apply\u0026#34;: {{ \u0026#34;erase_align\u0026#34;: 65536, \u0026#34;write_align\u0026#34;: 256 }} }} erase_align/write_align은 디바이스별로 다르므로 서버가 타깃별 manifest를 생성. 성능/신뢰성 팁 작은 패치는 압축 이득 \u0026lt; 오버헤드일 수 있음 → 임계값 이상에서만 델타 사용. 대용량 NAND는 ECC/OOB 고려, 블록 불량 테이블(BBT) 유지. 측정 자동화: 네트워크 트래픽, 플래시 쓰기량, 적용시간, 실패율을 CI에 리포팅. 체크리스트 from_version/hash 불일치 시 전체 이미지 폴백. Out-of-place 적용 + 스왑(안전). 정렬/지우기 단위에 맞춘 청크/쓰기. 재개 마커/블록 CRC + 전체 해시 재검증. Wear-level 정책(순환/분산) 적용. 성능 임계값 기준으로 델타/풀이미지 선택. 흔한 문제 현상 원인 대응 적용 중 손상 정렬 미스, 전원 중단 정렬 강제, 재개 마커 + 저널링 부팅 후 크래시 베이스 mismatch 베이스 검증 실패 시 폴백 강제 플래시 수명 악화 임시 영역 남용 임시 영역 wear-level/크기 조정 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/delta-ota-storage-layout/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e네트워크/스토리지 제약이 큰 디바이스에서는 \u003cstrong\u003e델타 OTA\u003c/strong\u003e(이전 버전 대비 차분만 전송)가 큰 이점을 줍니다. 하지만 플래시 정렬/지우기 단위, 전원 중단 내성, Wear-level, 베이스 버전 검증 등 \u003cstrong\u003e레이아웃 제약\u003c/strong\u003e을 함께 설계해야 합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"핵심-포인트\"\u003e핵심 포인트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e델타 형식\u003c/strong\u003e: bsdiff/xdelta/압축 결합(zstd). MCU에선 \u003cstrong\u003e스트리밍 적용\u003c/strong\u003e 가능한 간단 포맷 선호.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e베이스 버전 고정\u003c/strong\u003e: \u003ccode\u003efrom_version\u003c/code\u003e과 \u003cstrong\u003e베이스 해시\u003c/strong\u003e를 manifest에 명시, 불일치 시 전체 이미지로 폴백.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOut-of-place 적용\u003c/strong\u003e: 같은 슬롯 내 \u003cstrong\u003e임시 영역\u003c/strong\u003e 또는 B슬롯에 패치 적용 후 스왑(권장).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e정렬/지우기 단위\u003c/strong\u003e: NOR(4–64KB), NAND(128KB+) 지우기 단위에 맞춰 \u003cstrong\u003e청크 경계/쓰기 정렬\u003c/strong\u003e 유지.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e검증\u003c/strong\u003e: 적용 후 전체 해시 재검증 + 블록 CRC. \u003cstrong\u003e전원 끊김\u003c/strong\u003e 시 재개 지점 기록.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWear-level\u003c/strong\u003e: 자주 바뀌는 메타/로그는 순환 영역 사용, 델타 임시 파일은 균등 분산.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"레이아웃-예시\"\u003e레이아웃 예시\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[Boot] [Env] [A: App] [B: App] [DeltaScratch] [Shared(Log/Meta)]\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eDeltaScratch\u003c/code\u003e: 패치 적용 중 임시 저장, 지우기 단위 정렬.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eShared\u003c/code\u003e: 오류 로그/통계, 롤백 후 원인 분석에 활용.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"델타-적용-흐름의사코드\"\u003e델타 적용 흐름(의사코드)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eapply_delta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003epatch_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nf\"\u003ebase_version_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_ver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nf\"\u003ebase_hash_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003enext_chunk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nf\"\u003everify_chunk_crc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003efail_resume\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ewrite_aligned\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// erase-before-write + align\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003estore_resume_marker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003everify_full_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etarget_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e재개 마커\u003c/strong\u003e: 전원 실패 후 \u003ccode\u003epos\u003c/code\u003e부터 재시작. 마커는 저널 방식/2섹터 토글.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"manifest추가-필드-예시\"\u003eManifest(추가 필드 예시)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;from_version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;1.4.2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;from_hash\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;base-image-sha256\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;target_version\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;1.4.3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;target_hash\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;new-image-sha256\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;delta_size\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e183742\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;block\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e65536\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;apply\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;erase_align\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e65536\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026#34;write_align\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e256\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eerase_align\u003c/code\u003e/\u003ccode\u003ewrite_align\u003c/code\u003e은 디바이스별로 다르므로 서버가 \u003cstrong\u003e타깃별 manifest\u003c/strong\u003e를 생성.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"성능신뢰성-팁\"\u003e성능/신뢰성 팁\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e작은 패치는 \u003cstrong\u003e압축 이득 \u0026lt; 오버헤드\u003c/strong\u003e일 수 있음 → 임계값 이상에서만 델타 사용.\u003c/li\u003e\n\u003cli\u003e대용량 NAND는 \u003cstrong\u003eECC/OOB\u003c/strong\u003e 고려, 블록 불량 테이블(BBT) 유지.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e측정 자동화\u003c/strong\u003e: 네트워크 트래픽, 플래시 쓰기량, 적용시간, 실패율을 CI에 리포팅.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"체크리스트\"\u003e체크리스트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003efrom_version/hash\u003c/code\u003e 불일치 시 전체 이미지 폴백.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Out-of-place 적용 + 스왑(안전).\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 정렬/지우기 단위에 맞춘 청크/쓰기.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 재개 마커/블록 CRC + 전체 해시 재검증.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Wear-level 정책(순환/분산) 적용.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 성능 임계값 기준으로 델타/풀이미지 선택.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"흔한-문제\"\u003e흔한 문제\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e현상\u003c/th\u003e\n          \u003cth\u003e원인\u003c/th\u003e\n          \u003cth\u003e대응\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e적용 중 손상\u003c/td\u003e\n          \u003ctd\u003e정렬 미스, 전원 중단\u003c/td\u003e\n          \u003ctd\u003e정렬 강제, 재개 마커 + 저널링\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e부팅 후 크래시\u003c/td\u003e\n          \u003ctd\u003e베이스 mismatch\u003c/td\u003e\n          \u003ctd\u003e베이스 검증 실패 시 폴백 강제\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e플래시 수명 악화\u003c/td\u003e\n          \u003ctd\u003e임시 영역 남용\u003c/td\u003e\n          \u003ctd\u003e임시 영역 wear-level/크기 조정\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"델타 OTA와 스토리지 레이아웃 (분할/정렬/Wear-level) (정리판)"},{"content":"개요 현장 기기(게이트웨이, DVR, IoT 센서)에서 펌웨어 업데이트 실패는 곧 장애입니다. 안전성을 높이기 위해 흔히 쓰는 방식이 A/B 파티션 + 헬스체크 + 자동 롤백입니다. 이 글은 설계 핵심과 체크리스트, 최소 구현 스케치를 정리노트 형태로 제공합니다.\n1) A/B 파티션 핵심 영역 분리: 부트로더, A슬롯(활성), B슬롯(대기), 공유 설정/데이터. 원자성: 업데이트는 항상 비활성 슬롯(B)에 쓰고, 스위치는 부트플래그/부트카운터로 제어. 독립성: A/B가 서로 다른 버전/파일시스템/레이아웃을 가져도 안전하도록 부트 인덱스만 참조. 파티션 예 [Boot] [Env] [A: App + FS] [B: App + FS] [Shared NVRAM/Config] [Logs] 2) 부트 플로우 (의사코드) // NVRAM flags // boot_slot: 0(A) / 1(B) // trial: 부팅 검증 중(1) / 정상(0) // attempts: 남은 재시도 횟수 void boot(void) { slot = get_nv(\u0026#34;boot_slot\u0026#34;); trial = get_nv(\u0026#34;trial\u0026#34;); if (trial) { if (!health_check_ok()) { if (decrement_attempts() \u0026gt; 0) reboot_same_slot(); else switch_slot_and_reboot(); // 롤백 } else { set_nv(\u0026#34;trial\u0026#34;, 0); // 검증 완료 clear_attempts(); jump(slot); } } else { jump(slot); // 정상 부팅 } } 핵심: 부팅 직후에만 통과시키는 헬스체크 신호(앱이 부트로더에 “정상 가동” 알림). 앱이 정상 기동 전에 크래시/워치독 리셋되면 롤백 로직이 발동. 3) 헬스체크 설계 신호 경로: 부트로더가 읽을 수 있는 단 하나의 플래그(NVRAM/EEPROM/FRAM/특정 플래시 섹터). 타임박스: 예) 전원 인가 후 30초 내 앱이 /dev/flag_ok에 1 기록 → 부트로더가 다음 부팅에 trial=0. 보수적 판단: 플래그가 없으면 실패로 간주(전원 중단, 파일시스템 깨짐 대비). 4) OTA/스위치 OTA 클라이언트가 B슬롯에 이미지 다운로드 + 검증(해시/서명). boot_slot=B, trial=1, attempts=3 설정 후 reboot. 앱이 정상 기동 → 헬스체크 통과 → trial=0 확정. 실패/재부팅 반복 → attempts 소진 시 자동 롤백. 보안: 이미지 서명(Ed25519/ECDSA) + 메타데이터(버전/타깃/시간) 무결성 검증을 OTA 단계에서 수행.\n5) 최소 구현 스케치 부트로더 ↔ 앱 인터페이스 (예) // common_boot.h typedef struct { uint32_t magic; // 0xB007B007 uint8_t boot_slot; // 0:A, 1:B uint8_t trial; // 1: trial, 0: ok uint8_t attempts; // 남은 시도 uint8_t rsv; uint32_t crc32; } boot_env_t; // 앱: 헬스체크 OK 신호 void app_signal_ok(void) { boot_env_t env = read_boot_env(); env.trial = 0; env.attempts = DEFAULT_ATTEMPTS; env.crc32 = calc_crc32(\u0026amp;env, sizeof(env)-4); write_boot_env(env); } 6) 체크리스트 스위치 전 비활성 슬롯 이미지 검증(SHA-256 + 서명). 전원 중단 가정: 쓰기/스위치 작업은 항상 중단 내성 있게 설계(저널/더블버퍼). 부트로더/앱 모두 버전/슬롯 정보를 명확히 로깅. attempts 정책으로 부팅 플래핑 방지(무한 리셋 루프 차단). 롤백 후에도 원인 로그는 공유 파티션에 보존. 7) 운영 팁 원격 장비는 “인간 개입 없이” 복구 가능해야 함: 롤백 + 원격 재시도. 부트로더 업데이트는 별도의 Safe Mode 경로 또는 JTAG/USB 리커버리로 제한. 파일시스템 사용 시, 업데이트 영역은 읽기 전용 마운트 또는 스쿼시FS 등 사용 고려. 연계 글 (예정) OTA 이미지 서명/검증 파이프라인 만들기 부트로더 Safe Mode + 현장 리커버리 시나리오 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/bootloader-ab-rollback/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e현장 기기(게이트웨이, DVR, IoT 센서)에서 \u003cstrong\u003e펌웨어 업데이트 실패\u003c/strong\u003e는 곧 장애입니다. 안전성을 높이기 위해 흔히 쓰는 방식이 \u003cstrong\u003eA/B 파티션 + 헬스체크 + 자동 롤백\u003c/strong\u003e입니다. 이 글은 설계 핵심과 체크리스트, 최소 구현 스케치를 \u003cstrong\u003e정리노트\u003c/strong\u003e 형태로 제공합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-ab-파티션-핵심\"\u003e1) A/B 파티션 핵심\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e영역 분리\u003c/strong\u003e: 부트로더, A슬롯(활성), B슬롯(대기), 공유 설정/데이터.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e원자성\u003c/strong\u003e: 업데이트는 항상 비활성 슬롯(B)에 쓰고, \u003cstrong\u003e스위치\u003c/strong\u003e는 부트플래그/부트카운터로 제어.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e독립성\u003c/strong\u003e: A/B가 서로 다른 버전/파일시스템/레이아웃을 가져도 안전하도록 \u003cstrong\u003e부트 인덱스\u003c/strong\u003e만 참조.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"파티션-예\"\u003e파티션 예\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[Boot] [Env] [A: App + FS] [B: App + FS] [Shared NVRAM/Config] [Logs]\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"2-부트-플로우-의사코드\"\u003e2) 부트 플로우 (의사코드)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// NVRAM flags\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// boot_slot: 0(A) / 1(B)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// trial: 부팅 검증 중(1) / 정상(0)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// attempts: 남은 재시도 횟수\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eboot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003eslot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eget_nv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boot_slot\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"n\"\u003etrial\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eget_nv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;trial\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etrial\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nf\"\u003ehealth_check_ok\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003edecrement_attempts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003ereboot_same_slot\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eswitch_slot_and_reboot\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 롤백\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nf\"\u003eset_nv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;trial\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 검증 완료\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"nf\"\u003eclear_attempts\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nf\"\u003ejump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eslot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ejump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eslot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 정상 부팅\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e핵심\u003c/strong\u003e: 부팅 직후에만 통과시키는 \u003cstrong\u003e헬스체크 신호\u003c/strong\u003e(앱이 부트로더에 “정상 가동” 알림).   앱이 정상 기동 전에 크래시/워치독 리셋되면 롤백 로직이 발동.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-헬스체크-설계\"\u003e3) 헬스체크 설계\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e신호 경로\u003c/strong\u003e: 부트로더가 읽을 수 있는 단 하나의 플래그(NVRAM/EEPROM/FRAM/특정 플래시 섹터).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e타임박스\u003c/strong\u003e: 예) 전원 인가 후 30초 내 앱이 \u003ccode\u003e/dev/flag_ok\u003c/code\u003e에 1 기록 → 부트로더가 다음 부팅에 \u003ccode\u003etrial=0\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e보수적 판단\u003c/strong\u003e: 플래그가 없으면 실패로 간주(전원 중단, 파일시스템 깨짐 대비).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-ota스위치\"\u003e4) OTA/스위치\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eOTA 클라이언트가 B슬롯에 이미지 다운로드 + 검증(해시/서명).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eboot_slot=B\u003c/code\u003e, \u003ccode\u003etrial=1\u003c/code\u003e, \u003ccode\u003eattempts=3\u003c/code\u003e 설정 후 \u003cstrong\u003ereboot\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e앱이 정상 기동 → 헬스체크 통과 → \u003ccode\u003etrial=0\u003c/code\u003e 확정.\u003c/li\u003e\n\u003cli\u003e실패/재부팅 반복 → attempts 소진 시 자동 롤백.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e보안\u003c/strong\u003e: 이미지 서명(Ed25519/ECDSA) + 메타데이터(버전/타깃/시간) 무결성 검증을 OTA 단계에서 수행.\u003c/p\u003e","title":"부트로더 A/B + 안전 롤백 설계 (정리판)"},{"content":"개요 OTA 실패·스토리지 손상·설정 파손 같은 비정상 부팅 상황에서 기기를 벽돌로 만들지 않으려면, **Safe Mode(최소 기능 부팅)**와 리커버리 경로가 필요합니다. 이 문서는 트리거, 부팅 분기, 복구 채널, 보안/신뢰성 전제와 현장 운영 팁을 적용 중심으로 정리합니다.\n핵심 개념 / 설계 포인트 Safe Mode 목표: 네트워크 또는 물리 인터페이스를 통한 재플래시/롤백/설정 초기화만 제공. 트리거: 부팅 연속 실패 횟수, 특정 키 입력/핀 단락, 원격 명령, 펌웨어 플래그(force_safe=1). 부트 분기: Normal → Trial(새 이미지 검증) → 실패 시 Safe Mode → 복구/롤백 후 Normal 복귀. 복구 채널: USB DFU/Mass Storage, UART/XMODEM, SD카드, 이더넷(TFTP/HTTPS), 내부 Rescue 파티션. 보안: 복구 이미지도 서명 검증 필수. 개발자 모드와 현장 모드를 엄격 분리. 전원/스토리지 안정성: 원자적 플래그 갱신, 저널링/더블버퍼, 배터리/전압 체크 후 플래시 작업. 가시성: 상태 LED/부저 패턴, 디버그 콘솔 도움말, 오류코드 표준화. 현장 운용: RMA/AS 절차와 스크립트화, 장치 라벨링(시리얼/버전/키 ID). 부트 플로우(의사코드) void boot(void){ if (flag.force_safe || pin_safe_pressed()) return safe_mode(); if (trial_mode()){ if (app_health_ok_within(TIMEBOX)){ commit_trial_success(); return boot_app(); } else if (decrement_attempts() == 0){ log(\u0026#34;trial fail -\u0026gt; safe\u0026#34;); return safe_mode(); } else { reboot(); } } if (!app_valid() || boot_fail_counter() \u0026gt;= MAX_RETRY){ return safe_mode(); } boot_app(); } Safe Mode 구성 요소 Rescue 이미지: 읽기 전용(압축 가능), 크기 최소화, 네트워크 스택/스토리지 드라이버/검증 코드 포함. 업데이트 명령: flash \u0026lt;image.bin\u0026gt; \u0026lt;slot\u0026gt; / rollback / factory-reset / verify \u0026lt;manifest.json\u0026gt; 네트워크: DHCP 실패 대비 고정 IP/Link-Local, HTTPS/TLS 기본, 인증 토큰/핀코드. 물리 인터페이스: DFU 버튼/점퍼, UART 콘솔(속도·명령 최소화), SD 부트(파일명 규약). 로그: 모든 단계에서 결과/오류코드 기록 → 공유 파티션 업로드 가능. 보안 설계 서명 없는 리커버리 금지: 오프라인 서명/공개키 고정, 만료/철회 목록(CRL 비슷한 메커니즘) 고려. 디버그 포트 잠금: 생산 모드에선 JTAG/SWD 잠금(또는 보안 디버그 인증). 개발자 모드 게이트: 하드웨어 키/One-Time Token으로 제한, 디버그 빌드 노출 방지. 전원/스토리지 안전성 원자 플래그: 2섹터 토글(상호 배타적 유효 플래그), CRC 포함. 더블버퍼 쓰기: 새 이미지/메타를 임시 영역에 완성 후 커밋. Wear-level: 로그/카운터는 순환 버퍼로 쓰기, NAND는 OOB/ECC 고려. 운영 체크리스트 Safe Mode 진입 트리거 3종 이상(자동/물리/원격). Rescue 이미지의 서명 검증 경로 테스트. 플래그/카운터의 전원 중단 내성 시험(전원 드롭 테스트). LED/콘솔에 오류코드 매핑표 제공. RMA 스크립트와 리커버리 매뉴얼(사진 포함) 배포. 프로비저닝/개발자 모드 잠금 정책 문서화. 트러블슈팅 요약 증상 원인 후보 조치 Safe Mode 반복 진입 health 신호 타임박스 과도, 스토리지 오류 타임박스 조정, 스토리지 진단/Bad block 회피 리커버리 이미지 거부 서명/키 ID 불일치 키 롤오버 정책/manifest 확인 DFU 중 전원 끊김 원자 커밋 미비 더블버퍼/저널링 적용, 진행률 기반 재개 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/safe-mode-recovery/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003eOTA 실패·스토리지 손상·설정 파손 같은 \u003cstrong\u003e비정상 부팅 상황\u003c/strong\u003e에서 기기를 벽돌로 만들지 않으려면, **Safe Mode(최소 기능 부팅)**와 \u003cstrong\u003e리커버리 경로\u003c/strong\u003e가 필요합니다. 이 문서는 트리거, 부팅 분기, 복구 채널, 보안/신뢰성 전제와 현장 운영 팁을 \u003cstrong\u003e적용 중심\u003c/strong\u003e으로 정리합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"핵심-개념--설계-포인트\"\u003e핵심 개념 / 설계 포인트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSafe Mode 목표\u003c/strong\u003e: 네트워크 또는 물리 인터페이스를 통한 \u003cstrong\u003e재플래시/롤백/설정 초기화\u003c/strong\u003e만 제공.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e트리거\u003c/strong\u003e: 부팅 연속 실패 횟수, 특정 키 입력/핀 단락, 원격 명령, 펌웨어 플래그(\u003ccode\u003eforce_safe=1\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e부트 분기\u003c/strong\u003e: Normal → Trial(새 이미지 검증) → 실패 시 Safe Mode → 복구/롤백 후 Normal 복귀.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e복구 채널\u003c/strong\u003e: USB DFU/Mass Storage, UART/XMODEM, SD카드, 이더넷(TFTP/HTTPS), 내부 \u003cstrong\u003eRescue 파티션\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e보안\u003c/strong\u003e: 복구 이미지도 \u003cstrong\u003e서명 검증\u003c/strong\u003e 필수. \u003cstrong\u003e개발자 모드\u003c/strong\u003e와 현장 모드를 엄격 분리.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e전원/스토리지 안정성\u003c/strong\u003e: 원자적 플래그 갱신, 저널링/더블버퍼, 배터리/전압 체크 후 플래시 작업.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e가시성\u003c/strong\u003e: 상태 LED/부저 패턴, 디버그 콘솔 도움말, 오류코드 표준화.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e현장 운용\u003c/strong\u003e: RMA/AS 절차와 스크립트화, 장치 라벨링(시리얼/버전/키 ID).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"부트-플로우의사코드\"\u003e부트 플로우(의사코드)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eboot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eforce_safe\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nf\"\u003epin_safe_pressed\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003esafe_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003etrial_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003eapp_health_ok_within\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTIMEBOX\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nf\"\u003ecommit_trial_success\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eboot_app\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003edecrement_attempts\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nf\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;trial fail -\u0026gt; safe\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003esafe_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nf\"\u003ereboot\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nf\"\u003eapp_valid\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nf\"\u003eboot_fail_counter\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eMAX_RETRY\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003esafe_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nf\"\u003eboot_app\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"safe-mode-구성-요소\"\u003eSafe Mode 구성 요소\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRescue 이미지\u003c/strong\u003e: 읽기 전용(압축 가능), 크기 최소화, 네트워크 스택/스토리지 드라이버/검증 코드 포함.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e업데이트 명령\u003c/strong\u003e: \u003ccode\u003eflash \u0026lt;image.bin\u0026gt; \u0026lt;slot\u0026gt;\u003c/code\u003e / \u003ccode\u003erollback\u003c/code\u003e / \u003ccode\u003efactory-reset\u003c/code\u003e / \u003ccode\u003everify \u0026lt;manifest.json\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e네트워크\u003c/strong\u003e: DHCP 실패 대비 고정 IP/Link-Local, HTTPS/TLS 기본, 인증 토큰/핀코드.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e물리 인터페이스\u003c/strong\u003e: DFU 버튼/점퍼, UART 콘솔(속도·명령 최소화), SD 부트(파일명 규약).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e로그\u003c/strong\u003e: 모든 단계에서 결과/오류코드 기록 → 공유 파티션 업로드 가능.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"보안-설계\"\u003e보안 설계\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e서명 없는 리커버리 금지\u003c/strong\u003e: 오프라인 서명/공개키 고정, 만료/철회 목록(CRL 비슷한 메커니즘) 고려.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e디버그 포트 잠금\u003c/strong\u003e: 생산 모드에선 JTAG/SWD 잠금(또는 보안 디버그 인증).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e개발자 모드 게이트\u003c/strong\u003e: 하드웨어 키/One-Time Token으로 제한, 디버그 빌드 노출 방지.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"전원스토리지-안전성\"\u003e전원/스토리지 안전성\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e원자 플래그\u003c/strong\u003e: 2섹터 토글(상호 배타적 유효 플래그), CRC 포함.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e더블버퍼 쓰기\u003c/strong\u003e: 새 이미지/메타를 임시 영역에 완성 후 커밋.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWear-level\u003c/strong\u003e: 로그/카운터는 순환 버퍼로 쓰기, NAND는 OOB/ECC 고려.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"운영-체크리스트\"\u003e운영 체크리스트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Safe Mode 진입 트리거 3종 이상(자동/물리/원격).\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Rescue 이미지의 \u003cstrong\u003e서명 검증 경로\u003c/strong\u003e 테스트.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 플래그/카운터의 전원 중단 내성 시험(전원 드롭 테스트).\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e LED/콘솔에 \u003cstrong\u003e오류코드 매핑표\u003c/strong\u003e 제공.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e RMA 스크립트와 리커버리 매뉴얼(사진 포함) 배포.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 프로비저닝/개발자 모드 잠금 정책 문서화.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"트러블슈팅-요약\"\u003e트러블슈팅 요약\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e증상\u003c/th\u003e\n          \u003cth\u003e원인 후보\u003c/th\u003e\n          \u003cth\u003e조치\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSafe Mode 반복 진입\u003c/td\u003e\n          \u003ctd\u003ehealth 신호 타임박스 과도, 스토리지 오류\u003c/td\u003e\n          \u003ctd\u003e타임박스 조정, 스토리지 진단/Bad block 회피\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e리커버리 이미지 거부\u003c/td\u003e\n          \u003ctd\u003e서명/키 ID 불일치\u003c/td\u003e\n          \u003ctd\u003e키 롤오버 정책/manifest 확인\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDFU 중 전원 끊김\u003c/td\u003e\n          \u003ctd\u003e원자 커밋 미비\u003c/td\u003e\n          \u003ctd\u003e더블버퍼/저널링 적용, 진행률 기반 재개\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"부트로더 Safe Mode + 리커버리 설계 (정리판)"},{"content":"개요 가볍고 이식성 높은 Unity + CMock 조합과 CMake/CTest로 “호스트에서 빠른 유닛 테스트 → 선택적 QEMU 통합 스모크”를 만드는 실습 가이드입니다. 크로스 환경 의존을 최소화하고, HIL 전에 최대한 논리 버그를 제거하는 게 목표입니다.\n1) 폴더 구조(예시) project/ ├─ src/ # 제품 코드 ├─ include/ # 헤더 ├─ tests/ │ ├─ unit/ # 유닛 테스트 │ └─ integration/ # 통합 테스트 (QEMU 스모크 포함) ├─ third_party/ │ ├─ unity/ │ └─ cmock/ └─ CMakeLists.txt 2) 의존성 (간단 설치) # Unity \u0026amp; CMock 가져오기 (서브모듈 권장) git submodule add https://github.com/ThrowTheSwitch/Unity third_party/unity git submodule add https://github.com/ThrowTheSwitch/CMock third_party/cmock 3) 유닛 테스트 샘플 src/ringbuf.c를 예로:\n// include/ringbuf.h #pragma once #include \u0026lt;stdint.h\u0026gt; typedef struct { uint8_t* buf; int cap, head, tail; } ringbuf_t; void rb_init(ringbuf_t* rb, uint8_t* mem, int cap); int rb_push(ringbuf_t* rb, uint8_t v); int rb_pop(ringbuf_t* rb, uint8_t* out); int rb_size(const ringbuf_t* rb); // tests/unit/test_ringbuf.c #include \u0026#34;unity.h\u0026#34; #include \u0026#34;ringbuf.h\u0026#34; static uint8_t mem[8]; static ringbuf_t rb; void setUp(void){ rb_init(\u0026amp;rb, mem, 8); } void tearDown(void){} void test_push_and_pop(void){ TEST_ASSERT_EQUAL_INT(0, rb_size(\u0026amp;rb)); TEST_ASSERT_TRUE(rb_push(\u0026amp;rb, 0x11)); TEST_ASSERT_EQUAL_INT(1, rb_size(\u0026amp;rb)); uint8_t v=0; TEST_ASSERT_TRUE(rb_pop(\u0026amp;rb, \u0026amp;v)); TEST_ASSERT_EQUAL_HEX8(0x11, v); } CMakeLists.txt(요지):\nadd_executable(test_ringbuf tests/unit/test_ringbuf.c src/ringbuf.c third_party/unity/src/unity.c ) target_include_directories(test_ringbuf PRIVATE include third_party/unity/src) add_test(NAME test_ringbuf COMMAND test_ringbuf) 4) CMock로 HAL 모킹 하드웨어 접근 함수가 있는 hal_uart.h를 모킹:\n// include/hal_uart.h #pragma once int hal_uart_write(const char* data, int len); CMock로 모의 생성(빌드 스텝 or 사전 생성):\nruby third_party/cmock/vendor/cmock/lib/cmock.rb -o config.yml include/hal_uart.h # → mocks/Mockhal_uart.c, Mockhal_uart.h 생성 테스트에서 사용:\n#include \u0026#34;unity.h\u0026#34; #include \u0026#34;Mockhal_uart.h\u0026#34; // CMock 생성 헤더 #include \u0026#34;proto.h\u0026#34; // 테스트 대상 void test_proto_send_hello(void){ hal_uart_write_ExpectAndReturn(\u0026#34;HELLO\u0026#34;, 5, 5); TEST_ASSERT_TRUE(proto_send_hello()); } 5) QEMU로 통합 스모크(옵션) ARM Cortex-M 계열은 qemu-system-gnuarmeclipse 또는 qemu-system-arm 사용. 부팅 메시지 / 특정 레지스터 초기화 여부 검증처럼 HIL 전 가벼운 연기. 예시(아이디어):\nqemu-system-arm -M stm32-p103 -kernel build/firmware.elf -nographic -serial stdio | tee qemu.log grep \u0026#34;Boot OK\u0026#34; qemu.log 6) CI 팁 유닛 테스트는 호스트 런타임으로 빠르게(초·분 단위). CMock 생성은 캐시하거나 CI에서 Ruby 세팅을 넣어 반복 실행. QEMU 스모크는 PR 라벨/경로 조건으로 선택 실행. 마무리 체크 HAL 경유 \u0026amp; CMock 모킹이 자연스럽게 돌아가는가? 경계값(버퍼/타이밍아웃) 테스트가 포함되어 있는가? 유닛 → 통합 → HIL로 점진 강화되고 있는가? 연계 글 (예정) “테스트 더블 패턴 모음(Stub/Fake/Spy/Mock)과 C 언어 적용법” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-unit-integration-cmake/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e가볍고 이식성 높은 \u003cstrong\u003eUnity + CMock\u003c/strong\u003e 조합과 \u003cstrong\u003eCMake/CTest\u003c/strong\u003e로 “호스트에서 빠른 유닛 테스트 → 선택적 QEMU 통합 스모크”를 만드는 실습 가이드입니다. \u003cstrong\u003e크로스 환경 의존을 최소화\u003c/strong\u003e하고, \u003cstrong\u003eHIL 전\u003c/strong\u003e에 최대한 논리 버그를 제거하는 게 목표입니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-폴더-구조예시\"\u003e1) 폴더 구조(예시)\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eproject/\n ├─ src/                # 제품 코드\n ├─ include/            # 헤더\n ├─ tests/\n │   ├─ unit/           # 유닛 테스트\n │   └─ integration/    # 통합 테스트 (QEMU 스모크 포함)\n ├─ third_party/\n │   ├─ unity/\n │   └─ cmock/\n └─ CMakeLists.txt\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"2-의존성-간단-설치\"\u003e2) 의존성 (간단 설치)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Unity \u0026amp; CMock 가져오기 (서브모듈 권장)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule add https://github.com/ThrowTheSwitch/Unity third_party/unity\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule add https://github.com/ThrowTheSwitch/CMock third_party/cmock\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"3-유닛-테스트-샘플\"\u003e3) 유닛 테스트 샘플\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003esrc/ringbuf.c\u003c/code\u003e를 예로:\u003c/p\u003e","title":"임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+CMake+QEMU)"},{"content":"개요 하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 초기 설계 품질 + 자동화된 검증 체계로 결정됩니다.\n이 글은 “테스트 피라미드(유닛:통합:HIL ≈ 70:20:10), 테스트 친화 설계, CI 파이프라인”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.\n1) 핵심 전략 요약 테스트 피라미드: 유닛(최다) → 통합(선별) → HIL(임계경로 위주). 테스트 친화 설계(Design for Testability): HAL(하드웨어 추상화)로 의존성 분리. 링커 대체/약결(symbol weak), 함수 포인터 주입, 인터페이스(ports/adapters). 빌드 분리: Debug/Release/Test(테스트 전용 설정·스텁 허용). CI 파이프라인: Host(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크. 실패 시 아티팩트/로그 자동 첨부로 디버깅 시간 절감. 2) 레벨별 테스트 설계 2.1 유닛 테스트 “입출력 결정성”이 높은 순서로 작성. 순수 함수부터. C 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움. 링커 치환: -Wl,--wrap=foo로 하드웨어 의존 함수를 테스트 더블로 대체. 2.2 통합 테스트 드라이버+프로토콜 등 두 모듈 이상 결합 검증. 타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시. 시리얼·SPI 등은 Loopback/Fake HAL로 먼저 검증한 뒤 실제 보드로 축소 실행. 2.3 HIL(하드웨어 인더루프) 임계경로만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환. 자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 스모크는 가능. **롤백 가능한 펌업(OTA)**와 Watchdog 스크립트화. 3) CMake + CTest + Coverage 예시 # CMakeLists.txt (테스트 전용) enable_testing() add_executable(my_unit_tests tests/foo_test.c src/foo.c ) target_compile_options(my_unit_tests PRIVATE -O0 -g --coverage) target_link_libraries(my_unit_tests PRIVATE m gcov) add_test(NAME foo_test COMMAND my_unit_tests) # 실행 \u0026amp; 커버리지 ctest --output-on-failure lcov --directory . --capture --output-file coverage.info genhtml coverage.info --output-directory coverage_html 4) GitHub Actions 매트릭스(요지) jobs: test-build: runs-on: ubuntu-latest strategy: matrix: target: [host, arm-none-eabi] steps: - uses: actions/checkout@v4 with: { submodules: true } - name: Host test if: matrix.target == \u0026#39;host\u0026#39; run: | cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug cmake --build build -j ctest --test-dir build --output-on-failure - name: Cross build if: matrix.target == \u0026#39;arm-none-eabi\u0026#39; run: | cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake cmake --build build-arm -j 5) 실무 체크리스트 테스트 대상 코드는 하드웨어 접근을 직접 하지 않도록 HAL 경유. 타이밍 의존 로직은 클럭/타이머 인터페이스로 추상화. **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함. UBSan/ASan은 Host에서 최대한 사용(베어메탈은 제한). 실패 로그/아티팩트를 CI에서 자동 보존. 연계 글 (예정) “임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)” “HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증” ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-test-strategy/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e하드웨어 제약과 실시간 요구가 있는 임베디드에서 품질은 \u003cstrong\u003e초기 설계 품질 + 자동화된 검증 체계\u003c/strong\u003e로 결정됩니다.\u003cbr\u003e\n이 글은 “\u003cstrong\u003e테스트 피라미드\u003c/strong\u003e(유닛:통합:HIL ≈ \u003cstrong\u003e70:20:10\u003c/strong\u003e), \u003cstrong\u003e테스트 친화 설계\u003c/strong\u003e, \u003cstrong\u003eCI 파이프라인\u003c/strong\u003e”을 축으로 빠르게 적용할 수 있는 실무 전략을 정리합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-핵심-전략-요약\"\u003e1) 핵심 전략 요약\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e테스트 피라미드\u003c/strong\u003e: 유닛(최다) → 통합(선별) → HIL(임계경로 위주).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e테스트 친화 설계(Design for Testability)\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eHAL(하드웨어 추상화)로 \u003cstrong\u003e의존성 분리\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e링커 대체/약결(symbol weak)\u003c/strong\u003e, \u003cstrong\u003e함수 포인터 주입\u003c/strong\u003e, \u003cstrong\u003e인터페이스(ports/adapters)\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e빌드 분리: \u003ccode\u003eDebug/Release/Test\u003c/code\u003e(테스트 전용 설정·스텁 허용).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCI 파이프라인\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eHost(Unit) 테스트 + Coverage → Cross 빌드 산출물 → (옵션) QEMU/HIL 스모크.\u003c/li\u003e\n\u003cli\u003e실패 시 \u003cstrong\u003e아티팩트/로그\u003c/strong\u003e 자동 첨부로 디버깅 시간 절감.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-레벨별-테스트-설계\"\u003e2) 레벨별 테스트 설계\u003c/h2\u003e\n\u003ch3 id=\"21-유닛-테스트\"\u003e2.1 유닛 테스트\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e“입출력 결정성”이 높은 순서로 작성. \u003cstrong\u003e순수 함수\u003c/strong\u003e부터.\u003c/li\u003e\n\u003cli\u003eC 언어: Unity/CMock(가벼움), C++: doctest/Catch2(경량). GTest는 기능 풍부하나 상대적으로 무거움.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e링커 치환\u003c/strong\u003e: \u003ccode\u003e-Wl,--wrap=foo\u003c/code\u003e로 하드웨어 의존 함수를 테스트 더블로 대체.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"22-통합-테스트\"\u003e2.2 통합 테스트\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e드라이버+프로토콜 등 \u003cstrong\u003e두 모듈 이상 결합\u003c/strong\u003e 검증.\u003c/li\u003e\n\u003cli\u003e타이밍 창과 버퍼 경계(overflow/underflow) 케이스를 명시.\u003c/li\u003e\n\u003cli\u003e시리얼·SPI 등은 \u003cstrong\u003eLoopback/Fake HAL\u003c/strong\u003e로 먼저 검증한 뒤 실제 보드로 축소 실행.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"23-hil하드웨어-인더루프\"\u003e2.3 HIL(하드웨어 인더루프)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e임계경로\u003c/strong\u003e만 추출: 부팅/안전정지/펌웨어 업데이트/전원순환.\u003c/li\u003e\n\u003cli\u003e자동화 장비 없이도 파이썬(PySerial/pyvisa)로 간단한 \u003cstrong\u003e스모크\u003c/strong\u003e는 가능.\u003c/li\u003e\n\u003cli\u003e**롤백 가능한 펌업(OTA)**와 \u003cstrong\u003eWatchdog\u003c/strong\u003e 스크립트화.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-cmake--ctest--coverage-예시\"\u003e3) CMake + CTest + Coverage 예시\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cmake\" data-lang=\"cmake\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# CMakeLists.txt (테스트 전용)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eenable_testing\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eadd_executable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003etests/foo_test.c\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003esrc/foo.c\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003etarget_compile_options\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e \u003cspan class=\"s\"\u003ePRIVATE\u003c/span\u003e \u003cspan class=\"s\"\u003e-O0\u003c/span\u003e \u003cspan class=\"s\"\u003e-g\u003c/span\u003e \u003cspan class=\"s\"\u003e--coverage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003etarget_link_libraries\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e \u003cspan class=\"s\"\u003ePRIVATE\u003c/span\u003e \u003cspan class=\"s\"\u003em\u003c/span\u003e \u003cspan class=\"s\"\u003egcov\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eadd_test\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003eNAME\u003c/span\u003e \u003cspan class=\"s\"\u003efoo_test\u003c/span\u003e \u003cspan class=\"s\"\u003eCOMMAND\u003c/span\u003e \u003cspan class=\"s\"\u003emy_unit_tests\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 실행 \u0026amp; 커버리지\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ectest --output-on-failure\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003elcov --directory . --capture --output-file coverage.info\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egenhtml coverage.info --output-directory coverage_html\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"4-github-actions-매트릭스요지\"\u003e4) GitHub Actions 매트릭스(요지)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003etest-build\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eruns-on\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eubuntu-latest\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003estrategy\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003ematrix\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"l\"\u003ehost, arm-none-eabi]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003esteps\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003euses\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eactions/checkout@v4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e{\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nt\"\u003esubmodules\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e}\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eHost test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ematrix.target == \u0026#39;host\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"sd\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake --build build -j\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          ctest --test-dir build --output-on-failure\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eCross build\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ematrix.target == \u0026#39;arm-none-eabi\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"sd\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake -S . -B build-arm -DCMAKE_TOOLCHAIN_FILE=toolchains/arm-none-eabi.cmake\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e          cmake --build build-arm -j\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"5-실무-체크리스트\"\u003e5) 실무 체크리스트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 테스트 대상 코드는 \u003cstrong\u003e하드웨어 접근을 직접 하지 않도록\u003c/strong\u003e HAL 경유.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 타이밍 의존 로직은 \u003cstrong\u003e클럭/타이머 인터페이스\u003c/strong\u003e로 추상화.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e **정적분석(compile warnings = 0, -Wall -Wextra -Werror)**를 CI에 포함.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003cstrong\u003eUBSan/ASan\u003c/strong\u003e은 Host에서 최대한 사용(베어메탈은 제한).\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 실패 로그/아티팩트를 CI에서 자동 보존.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"연계-글-예정\"\u003e연계 글 (예정)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e“임베디드 유닛/통합 테스트 구축 실습 (Unity+CMock+QEMU)”\u003c/li\u003e\n\u003cli\u003e“HIL 스모크 자동화: PySerial로 시작하는 전원순환/부트 검증”\u003c/li\u003e\n\u003c/ul\u003e","title":"임베디드 코드 품질 개선을 위한 테스트 전략 (정리판)"},{"content":"개요 이미지 서명 체계는 시간이 지날수록 **키 교체(롤오버)**와 신뢰 앵커(Trust Anchor) 갱신이 필요합니다. 교체가 어설프면 정상 이미지도 거부되거나, 반대로 위조 이미지가 통과할 수 있습니다. 안전한 이동경로를 정리합니다.\n핵심 원칙 이중 수용 윈도우: N과 N+1 키를 일정 기간 동시 수용 → 이후 N 폐기. 키 식별자: manifest에 pub_key_id(또는 cert chain) 포함, 부트로더는 키 테이블에서 조회. 신뢰 앵커 버저닝: TA(version) 필드로 부트로더 내장 키 세트를 버전관리. Anti-rollback: 펌웨어/부트로더 모두 카운터 또는 버전 퓨즈를 이용해 다운그레이드 방지. 오프라인 서명/HSM: 키 생성·서명 환경 분리, 접근권한 최소화, 감사 추적. 마이그레이션 단계 준비: 부트로더 업데이트로 키 테이블에 N+1 추가, TA 버전 증가(ta_ver = 2). 이행: 배포 파이프라인에서 N+1 키로 서명 시작, 부트로더는 N/N+1 둘 다 허용. 폐기: 충분한 안정화 후 accept={{N+1}}만 허용. CRL/KeyRevocationList(간단 테이블) 반영. 청소: 오래된 이미지/메타에서 N 의존성 제거, 로그/감사 보고서 보관. 부트로더 구조(예시) typedef struct { const uint8_t* pk; uint16_t len; uint16_t flags; uint16_t kid; uint16_t ta_ver; } keyent_t; // flags: ACCEPT=1, REVOKED=2 extern const keyent_t KEYTAB[]; // ROM/RODATA bool verify_sig(const manifest_t* m, const uint8_t* img, size_t len){ const keyent_t* k = find_key_by_id(m-\u0026gt;sign.pub_key_id); if (!k || (k-\u0026gt;flags \u0026amp; REVOKED)) return false; if (k-\u0026gt;ta_ver \u0026lt; m-\u0026gt;min_ta_ver) return false; return ed25519_verify(m-\u0026gt;sign.sig, signed_bytes(m), signed_len(m), k-\u0026gt;pk); } 테이블 업데이트: 부트로더 업데이트나 별도 TA 세그먼트 업데이트로 반영. 폐기 표식: REVOKED 플래그/버전으로 거부. 배포 파이프라인 키 ID 주입: 빌드 시 pub_key_id, min_ta_ver를 manifest에 삽입. 이중 서명(선택): 과도기에 N/N+1 모두 서명해 호환성 확보(부트로더 복수 검증 지원 시). 감사/가시성: 어떤 키로 서명·검증되었는지 메트릭화. 사고 대응(키 유출/취소) 즉시 KeyRevocationList 업데이트 + TA 버전 인상(구 키 거부). N+1 키로 강제 업데이트 배포(안전 모드 진입 명령 포함). RMA/현장용 오프라인 리커버리 키는 완전히 별도 관리. 체크리스트 pub_key_id/ta_ver가 manifest/부트로더에 일관되게 반영. 이중 수용 윈도우와 최종 폐기 일정이 문서화. Anti-rollback 카운터/퓨즈 정책 적용. HSM/오프라인 서명과 접근권한 최소화. 키 유출 대응 절차/연락망/자동화 스크립트 준비. 흔한 함정 상황 문제 대안 키 교체 직후 대량 실패 구형 부트로더가 N+1을 모름 부트로더 업데이트를 선행하고 폭넓은 이중 수용 기간 키 폐기 누락 구 키 계속 허용 Revocation 리스트와 TA 버전 상향 강제 장기 필드 장치 업데이트 드물어 구 키만 인식 현장 방문 없이 Safe Mode OTA로 TA 업데이트 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/key-rollover-trust-anchor/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e이미지 서명 체계는 시간이 지날수록 **키 교체(롤오버)**와 \u003cstrong\u003e신뢰 앵커(Trust Anchor) 갱신\u003c/strong\u003e이 필요합니다. 교체가 어설프면 정상 이미지도 거부되거나, 반대로 위조 이미지가 통과할 수 있습니다. 안전한 이동경로를 정리합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"핵심-원칙\"\u003e핵심 원칙\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e이중 수용 윈도우\u003c/strong\u003e: N과 N+1 키를 일정 기간 \u003cstrong\u003e동시 수용\u003c/strong\u003e → 이후 N \u003cstrong\u003e폐기\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e키 식별자\u003c/strong\u003e: manifest에 \u003ccode\u003epub_key_id\u003c/code\u003e(또는 cert chain) 포함, 부트로더는 \u003cstrong\u003e키 테이블\u003c/strong\u003e에서 조회.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e신뢰 앵커 버저닝\u003c/strong\u003e: TA(version) 필드로 \u003cstrong\u003e부트로더 내장 키 세트\u003c/strong\u003e를 버전관리.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAnti-rollback\u003c/strong\u003e: 펌웨어/부트로더 모두 \u003cstrong\u003e카운터\u003c/strong\u003e 또는 \u003cstrong\u003e버전 퓨즈\u003c/strong\u003e를 이용해 다운그레이드 방지.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e오프라인 서명/HSM\u003c/strong\u003e: 키 생성·서명 환경 분리, 접근권한 최소화, 감사 추적.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"마이그레이션-단계\"\u003e마이그레이션 단계\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e준비\u003c/strong\u003e: 부트로더 업데이트로 \u003cstrong\u003e키 테이블에 N+1 추가\u003c/strong\u003e, TA 버전 증가(\u003ccode\u003eta_ver = 2\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e이행\u003c/strong\u003e: 배포 파이프라인에서 \u003cstrong\u003eN+1 키로 서명\u003c/strong\u003e 시작, 부트로더는 N/N+1 둘 다 허용.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e폐기\u003c/strong\u003e: 충분한 안정화 후 \u003ccode\u003eaccept={{N+1}}\u003c/code\u003e만 허용. \u003cstrong\u003eCRL/KeyRevocationList\u003c/strong\u003e(간단 테이블) 반영.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e청소\u003c/strong\u003e: 오래된 이미지/메타에서 N 의존성 제거, 로그/감사 보고서 보관.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"부트로더-구조예시\"\u003e부트로더 구조(예시)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003ekid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003eta_ver\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"kt\"\u003ekeyent_t\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// flags: ACCEPT=1, REVOKED=2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eextern\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003ekeyent_t\u003c/span\u003e \u003cspan class=\"n\"\u003eKEYTAB\u003c/span\u003e\u003cspan class=\"p\"\u003e[];\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// ROM/RODATA\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003everify_sig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003emanifest_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003ekeyent_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003efind_key_by_id\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esign\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epub_key_id\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eREVOKED\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eta_ver\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emin_ta_ver\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eed25519_verify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esign\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003esigned_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nf\"\u003esigned_len\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epk\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e테이블 업데이트\u003c/strong\u003e: 부트로더 업데이트나 별도 \u003cstrong\u003eTA 세그먼트\u003c/strong\u003e 업데이트로 반영.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e폐기 표식\u003c/strong\u003e: \u003ccode\u003eREVOKED\u003c/code\u003e 플래그/버전으로 거부.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"배포-파이프라인\"\u003e배포 파이프라인\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e키 ID 주입\u003c/strong\u003e: 빌드 시 \u003ccode\u003epub_key_id\u003c/code\u003e, \u003ccode\u003emin_ta_ver\u003c/code\u003e를 manifest에 삽입.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e이중 서명(선택)\u003c/strong\u003e: 과도기에 N/N+1 모두 서명해 호환성 확보(부트로더 복수 검증 지원 시).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e감사/가시성\u003c/strong\u003e: 어떤 키로 서명·검증되었는지 메트릭화.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"사고-대응키-유출취소\"\u003e사고 대응(키 유출/취소)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e즉시 \u003cstrong\u003eKeyRevocationList\u003c/strong\u003e 업데이트 + TA 버전 인상(구 키 거부).\u003c/li\u003e\n\u003cli\u003eN+1 키로 \u003cstrong\u003e강제 업데이트\u003c/strong\u003e 배포(안전 모드 진입 명령 포함).\u003c/li\u003e\n\u003cli\u003eRMA/현장용 오프라인 리커버리 키는 \u003cstrong\u003e완전히 별도 관리\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"체크리스트\"\u003e체크리스트\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e \u003ccode\u003epub_key_id\u003c/code\u003e/\u003ccode\u003eta_ver\u003c/code\u003e가 manifest/부트로더에 일관되게 반영.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 이중 수용 윈도우와 최종 폐기 일정이 문서화.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Anti-rollback 카운터/퓨즈 정책 적용.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e HSM/오프라인 서명과 접근권한 최소화.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 키 유출 대응 절차/연락망/자동화 스크립트 준비.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"흔한-함정\"\u003e흔한 함정\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e상황\u003c/th\u003e\n          \u003cth\u003e문제\u003c/th\u003e\n          \u003cth\u003e대안\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e키 교체 직후 대량 실패\u003c/td\u003e\n          \u003ctd\u003e구형 부트로더가 N+1을 모름\u003c/td\u003e\n          \u003ctd\u003e부트로더 업데이트를 \u003cstrong\u003e선행\u003c/strong\u003e하고 폭넓은 이중 수용 기간\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e키 폐기 누락\u003c/td\u003e\n          \u003ctd\u003e구 키 계속 허용\u003c/td\u003e\n          \u003ctd\u003eRevocation 리스트와 TA 버전 상향 강제\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e장기 필드 장치\u003c/td\u003e\n          \u003ctd\u003e업데이트 드물어 구 키만 인식\u003c/td\u003e\n          \u003ctd\u003e현장 방문 없이 \u003cstrong\u003eSafe Mode OTA\u003c/strong\u003e로 TA 업데이트\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"키 롤오버와 신뢰 앵커 마이그레이션 (정리판)"},{"content":"개요 임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 실시간성을 고려해야 합니다. 이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다. 본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.\n1) 전통적 개발 방법론 워터폴 모델 — 핵심 요약 요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행 장점: 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리 단점: 요구사항 변경에 취약, 환경 변동성 반영 어려움 부연 설명 하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다. 다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.\nV-모델 — 핵심 요약 워터폴 확장형: 각 설계 단계에 상응하는 검증 단계가 1:1로 매칭 장점: 설계-검증 트레이스가 선명, 안전/규제 산업에 적합 단점: 초기 설계 오류가 뒤늦게 발견되면 비용 큼 부연 설명 자동차 ECU, 의료기기 등에서는 요구사항→시스템설계→SW/HW설계 단계가 테스트 계획과 함께 동반됩니다. “통합 설계 ↔ 통합 테스트”, “코드 구현 ↔ 단위 테스트”처럼 좌우가 대응합니다.\n2) 현대적 개발 방법론 애자일(Agile) — 핵심 요약 반복/점진 개발로 변화 수용성을 극대화 장점: 프로토타이핑·시장 검증이 빠른 제품에 적합 실무 팁: Sprint마다 크로스 컴파일·펌웨어 배포·보드 테스트를 CI로 자동화 부연 설명 하드웨어 플래싱/리그 세팅이 병목이 되기 쉬우므로,\n펌웨어 버전 태깅, 자동 아티팩트 업로드 HIL(하드웨어-in-the-loop) 테스트 일부 자동화 실패 시 보드 롤백 스크립트 같은 보조 장치를 함께 준비하면 애자일의 강점을 살릴 수 있습니다. 모델 기반 개발(MBD) — 핵심 요약 모델(예: Simulink)로 설계·시뮬레이션 후 코드 자동생성 장점: 제어 알고리즘 개발/검증 효율적, 초기 결함 조기 발견 적용: 로보틱스, 드론, 파워 일렉트로닉스 등 부연 설명 예) 드론 고도 제어 PID를 모델로 검증 → 코드 자동생성 → STM32/ESP32 포팅. 모델-코드 추적성 확보와 오토코드 룰 체크(코딩 가이드 준수)가 포인트입니다.\n3) 품질 보증과 테스트 연결 단위 테스트: 드라이버·라이브러리 단위 기능 검증 통합 테스트: 보드 입출력(UART/SPI/I2C/GPIO)과 상위 로직 결합 검증 CI/CD: 크로스 컴파일 → 펌웨어 산출물 버전체계 → 자동 플래싱/스모크 테스트 👉 다음 편 예고: 임베디드 코드 품질 개선을 위한 테스트 전략\n4) 선택 가이드 요약 하드웨어 변경 적고 규격 고정 → V-모델/워터폴 빠른 출시·요구 변경 많음 → 애자일 제어/안전 중요 → MBD 현실적으로는 하이브리드가 최선: 초기 요구/아키텍처는 V-모델, 기능 확장은 애자일, 제어는 MBD. 연계 페이지 (작성 예정) 임베디드 요구사항 정의 체크리스트 임베디드 CI/CD 환경 구축 가이드 자동차 ECU 개발과 V-모델 사례 MBD와 코드 자동 생성 사례 ","permalink":"https://nlimbo76.github.io/tech-notes/posts/embedded-methodology/","summary":"\u003ch2 id=\"개요\"\u003e개요\u003c/h2\u003e\n\u003cp\u003e임베디드 시스템 개발은 일반 애플리케이션과 달리 **자원 제약(메모리·CPU·전력)**과 \u003cstrong\u003e실시간성\u003c/strong\u003e을 고려해야 합니다.\n이 때문에 개발 방법론 선택이 프로젝트의 성공과 실패를 크게 좌우합니다.\n본 문서는 실무 정리노트 스타일로 핵심 개념을 먼저 요약하고, 아래에 부연 설명과 연계 글 링크를 제공합니다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-전통적-개발-방법론\"\u003e1) 전통적 개발 방법론\u003c/h2\u003e\n\u003ch3 id=\"워터폴-모델--핵심-요약\"\u003e워터폴 모델 — 핵심 요약\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e요구사항 → 설계 → 구현 → 검증 → 유지보수 순의 직선적 단계 진행\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e장점:\u003c/strong\u003e 문서화/이력 관리 용이, 하드웨어 규격이 고정된 프로젝트에 유리\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e단점:\u003c/strong\u003e 요구사항 변경에 취약, 환경 변동성 반영 어려움\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e부연 설명\u003c/strong\u003e\n하드웨어(SoC/MCU/센서)가 얼리-락된 상황에서 공정/양산 관점으로 추진할 때 특히 안정적입니다.\n다만 IoT처럼 요구사항이 자주 바뀌는 경우에는 초기 설계를 과도하게 견고하게 만드는 실수를 주의해야 합니다.\u003c/p\u003e","title":"임베디드 시스템 개발 방법론 정리 (확장판)"}]